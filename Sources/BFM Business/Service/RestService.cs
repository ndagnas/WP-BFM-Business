//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : RestService.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet RestService
// Créé le       : 29/06/2015
// Modifié le    : 20/10/2016
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Web;
using System.Text;
using System.Threading;
using System.ComponentModel;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Text.RegularExpressions;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Net.NetworkInformation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextRadio.Service.Resources;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextRadio.Service"
//*******************************************************************************************************************************
namespace NextRadio.Service
	{

	//  ####   #####   ####  #####          ###   #      #  #####  #   #  #####
	//  #   #  #      #        #           #   #  #      #  #      ##  #    #  
	//  ####   ###     ###     #    #####  #      #      #  ###    # # #    #  
	//  #   #  #          #    #           #   #  #      #  #      #  ##    #  
	//  #   #  #####  ####     #            ###   #####  #  #####  #   #    #  
	
	//***************************************************************************************************************************
	// Classe RestService
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet l'appel aux procédures du Service-Web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class RestService
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private const string UserAgent = "BFMBusiness 3.1.1 (iPhone; iPhone OS 8.0.0; fr_FR)";
		private const string BaseUri   = "https://api.nextradiotv.com/bfmbusiness-applications/";
		private const string AppTitle  = "BFMTV Economie : la cha&#238;ne TV et Radio 100&#37;" +
		                                 " Economie sur BFMTV.COM";
		//-----------------------------------------------------------------------------------------------------------------------
		private static Regex InnerLinkNotify = new Regex ( @"^http\:\/\/([a-zA-Z]+)\.bfmtv\.com" +
		                                                   @"\/([a-zA-Z0-9\-\/]+)-([0-9]+)\.html", 
														                 RegexOptions.IgnoreCase );
		//-----------------------------------------------------------------------------------------------------------------------
		private static List<string>             ViewedArticles = null;
		private static Dictionary<long, string> Colors         = null;
		private static string                   TokenID        = string.Empty;
		private static DateTime                 LastTokenUse   = DateTime.MinValue;
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		static RestService ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				Colors = (Dictionary<long, string>)StorageSettings.GetValue ( "colors" );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			finally
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Colors == null ) Colors = new Dictionary<long, string> ();

				Colors[(long)SectionType.Banking     ] = "4B4B4B";
				Colors[(long)SectionType.Construction] = "4B4B4B";
				Colors[(long)SectionType.Culture     ] = "4B4B4B";
				Colors[(long)SectionType.Distribution] = "4B4B4B";
				Colors[(long)SectionType.Employment  ] = "4B4B4B";
				Colors[(long)SectionType.Energy      ] = "4B4B4B";
				Colors[(long)SectionType.France      ] = "4B4B4B";
				Colors[(long)SectionType.Industry    ] = "4B4B4B";
				Colors[(long)SectionType.Innovation  ] = "4B4B4B";
				Colors[(long)SectionType.Observatory ] = "4B4B4B";
				Colors[(long)SectionType.Sport       ] = "4B4B4B";
				Colors[(long)SectionType.Tourism     ] = "4B4B4B";
				Colors[(long)SectionType.Transport   ] = "4B4B4B";
				Colors[(long)SectionType.World       ] = "4B4B4B";
				Colors[(long)SectionType.YourMoney   ] = "4B4B4B";
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			ViewedArticles = StorageSettings.GetValue ( "articles" ) as List<string>;

			if ( ViewedArticles == null ) ViewedArticles = new List<string> ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de l'Article.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ArticleToFile ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "ARTICLE-" + Article.ArticleID + ".HTML";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Extrait une méta-data.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ExtractMeta ( string Content, string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int MetaIndex = Content.IndexOf ( "<meta name=\"" + Name + "\"" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( MetaIndex > -1 )
				{
				//---------------------------------------------------------------------------------------------------------------
				int ContentIndex = Content.IndexOf ( "content=\"", MetaIndex );

				if ( ContentIndex > -1 )
					{
					int SIndex = ContentIndex + 9;
					int EIndex = Content.IndexOf ( "\"", SIndex );

					return Content.Substring ( SIndex, EIndex - SIndex );
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Document">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string FixContent ( string Document, string LinkHtml )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			StringBuilder Content = new StringBuilder ( Document );

			for ( int Index = 0 ; Index < Content.Length ; Index ++ )
				{
				//---------------------------------------------------------------------------------------------------------------
				char Car = Content[Index];
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Car == '<' )
					{
					//-----------------------------------------------------------------------------------------------------------
					// '<a '
					//-----------------------------------------------------------------------------------------------------------
					if ( Content[Index + 1] == 'a' && Content[Index + 2] == ' ' )
						{
						int EndTag = Content.IndexOf ( ">", Index );

						if ( EndTag != -1 )
							{
							string Value = Content.ToString ( Index, EndTag - Index + 2 );

							int PosSrc = Value.IndexOf ( "href=" );

							if ( PosSrc != -1 )
								{
								int PosEnd = Value.IndexOf ( "\"", PosSrc + 6 );

								if ( PosEnd > PosSrc )
									{
									string Source = Value.Substring ( PosSrc + 6, PosEnd - PosSrc - 6 );

									var M = InnerLinkNotify.Match ( Source );

									if ( M.Success )
										{
										var QueryString = new NameValueCollection ();

										QueryString["Uri"] = Source;
										
										string NewContent = string.Format ( LinkHtml, QueryString.ToString () );

										Content.Remove ( Index, Value.Length );
										Content.Insert ( Index, NewContent   );

										Index += NewContent.Length;
										}
									}
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Width
				//---------------------------------------------------------------------------------------------------------------
				else if ( Car == 'w' || Car == 'W' )
					{
					//-----------------------------------------------------------------------------------------------------------
					// 'width'
					//-----------------------------------------------------------------------------------------------------------
					if ( ( Content[Index + 1] == 'i' || Content[Index + 1] == 'I' ) && 
					     ( Content[Index + 2] == 'd' || Content[Index + 2] == 'D' ) && 
					     ( Content[Index + 3] == 't' || Content[Index + 3] == 'T' ) && 
					     ( Content[Index + 4] == 'h' || Content[Index + 4] == 'H' ) )
						{
						Content[Index] = '_';
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Color
				//---------------------------------------------------------------------------------------------------------------
				else if ( Car == 'c' || Car == 'C' )
					{
					//-----------------------------------------------------------------------------------------------------------
					// 'color:#'
					//-----------------------------------------------------------------------------------------------------------
					if ( ( Content[Index + 1] == 'o' || Content[Index + 1] == 'O' ) && 
					     ( Content[Index + 2] == 'l' || Content[Index + 2] == 'L' ) && 
					     ( Content[Index + 3] == 'o' || Content[Index + 3] == 'O' ) && 
					     ( Content[Index + 4] == 'r' || Content[Index + 4] == 'R' ) && 
					     ( Content[Index + 5] == ':' || Content[Index + 5] == ':' ) && 
					     ( Content[Index + 6] == '#' || Content[Index + 6] == '#' ) )
						{
						Content[Index] = '_';
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Document = Content.ToString ();
			
			return Document;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
				
		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return InsertSheets ( Content, false );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Corrige le document.
		/// </summary>
		/// <param name="Content">Document à corriger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string InsertSheets ( string Content, bool HideViewedArticles )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) ) return string.Empty;

			int StylePosition = Content.IndexOf ( "[STYLE]" );
			int StyleSize     = 7;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( StylePosition > 0 && Content.Length > StylePosition + StyleSize )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Content.Substring ( StylePosition, StyleSize ).Equals ( "[STYLE]" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					string StyleSheetsContent = StyleSheets.Content;
					
					if ( HideViewedArticles ) StyleSheetsContent += ViewedArticlesToStyle ();

					return string.Format ( "{0}{1}{2}", Content.Substring ( 0, StylePosition ),
					         StyleSheetsContent, Content.Substring ( StylePosition + StyleSize ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Identifie un article comme lu.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void RegisterArticle ( Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! ViewedArticles.Contains ( Article.ArticleID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				ViewedArticles.Add ( Article.ArticleID );

				while ( ViewedArticles.Count > 50 ) ViewedArticles.RemoveAt ( 0 );

				StorageSettings.SetValue ( "articles", ViewedArticles );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la couleur associée à la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToColor ( long SectionID )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return ( Colors.ContainsKey ( SectionID ) ) ? Colors[SectionID] : "4B4B4B";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToFile ( SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SECTION-" + Type.ToString ().ToUpper () + ".HTML";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant unique de la Section.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string SectionToPart ( SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return "SECTION-" + Type.ToString ().ToUpper () + ".PART";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le style permettant le marquage des articles déjà lus.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ViewedArticlesToStyle ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Result = string.Empty;

			foreach ( string ViewedArticle in ViewedArticles )
				{ Result += ( ( string.IsNullOrEmpty ( Result ) ) ? "" : "," ) + ( "#A_" + ViewedArticle ); }

			if ( ! string.IsNullOrEmpty ( Result ) )
				return string.Format ( SR.GetResource ( "GetArticlesList", "Cont.css" ), Result );

			return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du 'GET'
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Délégate utilisé pour avertir de la réception des données
		//-----------------------------------------------------------------------------------------------------------------------
		private delegate void DownloadBitsCallback ( DownloadBitsState Args );
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Classe DownloadBitsState
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet le traitement d'une demande GET
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private class DownloadBitsState
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private object           AssociateObject;
			private AppCacheFile     CacheFile;
			private RestEventHandler OnComplete;
			private AsyncOperation   AsyncOperation;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>DownloadBitsState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsState ( object               AssociateObject, 
			                           AppCacheFile         CacheFile      , 
			                           object               UserToken      , 
									   RestEventHandler     OnComplete     , 
									   DownloadBitsCallback Callback       )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AssociateObject = AssociateObject;
				this.CacheFile       = CacheFile;
				this.OnComplete      = OnComplete;
				this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.Callback       = Callback;
				this.Cookies        = new NameValueCollection ();
				this.Document       = null;
				this.Exception      = null;
				this.Stream         = null;
				this.StreamBuffer   = string.Empty;
				this.Request        = null;
				this.Response       = null;
				this.UserToken      = UserToken;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens la page web correspondante à l'anomalie.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			private string GetErrorContent ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string Content = SR.GetResource ( "Global", "404.html" );
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				switch ( Error )
					{
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.EmptyResponse      : Content = 
						 string.Format ( Content, "EMPTY_RESPONSE"      , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InvalideFormat     : Content = 
						 string.Format ( Content, "INVALIDE_FORMAT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.PartialContent     : Content = 
						 string.Format ( Content, "PARTIAL_CONTENT"     , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Forbidden          : Content = 
						 string.Format ( Content, "FORBIDDEN"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.NotFound           : Content = 
						 string.Format ( Content, "NOT_FOUND"           , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Timeout            : Content = 
						 string.Format ( Content, "TIMEOUT"             , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.Unauthorized       : Content = 
						 string.Format ( Content, "UNAUTHORIZED_ACCESS" , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.InternalException  : Content = 
						 string.Format ( Content, "INTERNAL_EXCEPTION"  , "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ProxyAccessRequest : Content = 
						 string.Format ( Content, "PROXY_ACCESS_REQUEST", "block", "none" ); break;
					//-----------------------------------------------------------------------------------------------------------
					case RestRequestResult.ServiceUnavailable : Content = 
						 string.Format ( Content, "SERVICE_UNAVAILABLE" , "none", "block" ); break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return InsertSheets ( Content );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( Uri ProxyAccessRequestUri )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.PostAnomaly ( RestRequestResult.ProxyAccessRequest );

				try
					{
					//-----------------------------------------------------------------------------------------------------------
					Instance.RootFrame.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						try
							{
							//---------------------------------------------------------------------------------------------------
							(new WebBrowserTask () { Uri = ProxyAccessRequestUri }).Show ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						catch {}
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( this.CacheFile != null && ! this.CacheFile.IsEmpty )
							{
							//---------------------------------------------------------------------------------------------------
							string Content = InsertSheets ( CacheFile.Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							string Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostAnomaly ( RestRequestResult Error, string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.OnComplete != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! string.IsNullOrEmpty ( Content ) )
							{
							//---------------------------------------------------------------------------------------------------
							Content = InsertSheets ( Content, true );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else
							{
							//---------------------------------------------------------------------------------------------------
							Content = this.GetErrorContent ( Error );

							var E = new RestEventArgs ( this.AssociateObject, Content, Error );

							this.OnComplete ( this.UserToken, E );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostCallback ( SendOrPostCallback Callback )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation  = AsyncOperationManager.CreateOperation ( null );

					Callback ( null );
					//-----------------------------------------------------------------------------------------------------------
					}, null );
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string Content )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( this.AssociateObject, Content );

						this.OnComplete ( this.UserToken, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// Termine de générer la réponse et l'envoi
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void PostOperationComplete ( string Content, object UserToken )
				{
				//---------------------------------------------------------------------------------------------------------------
				#region // Implémentation de la Procédure
				//---------------------------------------------------------------------------------------------------------------
				if ( this.OnComplete != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.AsyncOperation.PostOperationCompleted ( ( _ ) =>
						{
						//-------------------------------------------------------------------------------------------------------
						var E = new RestEventArgs ( this.AssociateObject, Content );

						this.OnComplete ( UserToken, E );
						//-------------------------------------------------------------------------------------------------------
						}, null );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				#endregion
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public DownloadBitsCallback Callback { get; private set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public NameValueCollection Cookies { get; set; }
			//*******************************************************************************************************************
		
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public JToken Document { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public Exception Exception { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public Stream Stream { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
		    public string StreamBuffer { get; set; }
			//*******************************************************************************************************************
			
			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebRequest Request { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public HttpWebResponse Response { get; set; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// 
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object UserToken { get; private set; }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Lance une requête de type GET
		/// </summary>
		/// <param name="Path">Chemin de la page à charger.</param>
		/// <param name="OnComplete">Est appelé à la fin du traitement.</param>
		/// <param name="Callback">Est appelé à la fin de l'appel.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void DownloadBits ( object               AssociateObject,
		                                   string               Path           ,  
										   int                  TimeOut        ,
										   AppCacheFile         CacheFile      ,
		                                   object               UserToken      , 
		                                   RestEventHandler     OnComplete     , 
										   DownloadBitsCallback Callback       )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest Request = RestWebRequest.Create ();

			Request.UseCompression = RestService.UseCompression;

			Request.TimeOut = TimeOut;

			Request.Headers["User-Agent"] = UserAgent;

			if ( ! string.IsNullOrEmpty ( TokenID ) ) Path = BaseUri + TokenID + "/" + Path;
			else                                      Path = BaseUri +                 Path;

			var AsyncState = new DownloadBitsState ( AssociateObject, CacheFile, UserToken, OnComplete, Callback );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsState State = Args.UserToken as DownloadBitsState;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Request   = Args.Request;
					State.Response  = Args.Response;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							State.Cookies = new NameValueCollection ( Request.Cookies );

							using ( StreamReader Tr = new StreamReader ( Args.Stream ) )
								{
								State.StreamBuffer = Tr.ReadToEnd ();

								State.Document = JToken.Parse ( State.StreamBuffer );
								}

							State.Callback ( State );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								//-----------------------------------------------------------------------------------------------
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.Unauthorized )
									{
									if ( AssociateObject != null )
										RestService.TokenID = string.Empty;
									
									Result = RestRequestResult.Unauthorized;
									}
								else if ( Response.StatusCode == HttpStatusCode.Forbidden )
									{
									if ( AssociateObject != null )
										RestService.TokenID = string.Empty;
									
									Result = RestRequestResult.Forbidden;
									}
								else if ( Response.StatusCode == HttpStatusCode.NotFound )
									{
									Result = RestRequestResult.NotFound;
									}
								else if ( Response.StatusCode == HttpStatusCode.RequestTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								else if ( Response.StatusCode == HttpStatusCode.GatewayTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ReceiveFailure )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.EmptyResponse;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ProtocolError )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.NotFound;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! string.IsNullOrEmpty ( Exception.Message ) )
								{
								//-----------------------------------------------------------------------------------------------
								if ( Exception.Message.IndexOf ( "NotFound" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.NotFound;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								else if ( Exception.Message.IndexOf ( "Timeout" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.Timeout;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						State.PostAnomaly ( Result );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Cancelled )
							State.PostAnomaly ( RestRequestResult.Timeout            );
						else
							State.PostAnomaly ( RestRequestResult.ServiceUnavailable );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.IsRedirected && Args.ResponseUri != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
							{ State.PostAnomaly ( Args.ResponseUri ); Args.Cancel = true; }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( JsonReaderException Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						// Le contenue est vide
						//-------------------------------------------------------------------------------------------------------
						if ( string.IsNullOrEmpty ( State.StreamBuffer ) )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La taille de la réponse est de 0
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.Response               == null )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						else if ( Args.Response.ContentLength <=    0 )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// La réponse est vide
						//-------------------------------------------------------------------------------------------------------
						else if ( State.StreamBuffer[0] == '\0' )
							State.PostAnomaly ( RestRequestResult.EmptyResponse  );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// On a été redirigé de force
						//-------------------------------------------------------------------------------------------------------
						else if ( Args.ResponseUri != null )
							{
							//---------------------------------------------------------------------------------------------------
							if ( ! Args.ResponseUri.OriginalString.StartsWith ( BaseUri ) )
								{ State.PostAnomaly ( Args.ResponseUri ); Args.Cancel = true; }
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch { State.PostAnomaly ( RestRequestResult.InvalideFormat ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( Exception Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;

					State.PostAnomaly ( RestRequestResult.InternalException );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), AsyncState );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Enregistrement de l'App
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>RegisterApp</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static bool ParseRegisterApp ( JToken Racine, out string Message )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Message = string.Empty;
			
			if ( Racine == null || ! Racine.HasValues ) return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Message = Racine.Value<string>( "message" );

			if ( ! string.IsNullOrEmpty ( Message ) ) return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Session = Racine["session"];

			if ( Session == null || ! Session.HasValues ) return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			TokenID = Session.Value<string>( "token" );
			//-------------------------------------------------------------------------------------------------------------------
/*
			//-------------------------------------------------------------------------------------------------------------------
			var CategoriesColors = Session["categories_colors"];

			if ( CategoriesColors == null || ! CategoriesColors.HasValues ) return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Field = CategoriesColors.First;

			while ( Field != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				int Id = Field.Value<int>( "id" );

				var ColorToken = Field["color"];
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ColorToken != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					byte R = ColorToken.Value<byte>( "R" );
					byte G = ColorToken.Value<byte>( "G" );
					byte B = ColorToken.Value<byte>( "B" );

					Colors[Id] = string.Format ( "{0}{1}{2}", R.ToString ( "X2" ), 
					                                          G.ToString ( "X2" ), 
															  B.ToString ( "X2" ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Field = Field.Next;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			StorageSettings.SetValue ( "colors", Colors );
*/
			return true;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void RegisterApp ( object AssociateObject, AppCacheFile CacheFile,
		                                       EventHandler Callback, RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Exécution
			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( AssociateObject, "", 20, CacheFile, Callback, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				string Message = string.Empty;

				if ( ParseRegisterApp ( State.Document, out Message ) )
					{
					State.PostCallback ( ( _ ) => { Callback ( null, EventArgs.Empty ); } );
					}
				else { State.PostAnomaly ( RestRequestResult.ServiceUnavailable ); }
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetArticle
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Récupère la vidéo.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string GetVideo ( int VideoID, string VideHtml, string EvidHtml )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Content = EvidHtml;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( VideoID > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				AutoResetEvent AutoEvent = new AutoResetEvent ( false );

				RestEventHandler Handler = ( Sender, Args ) => { AutoEvent.Set(); };

				string Path = string.Format ( "getVideo?idVideo={0}&quality={1}", VideoID, (int)MediaQuality );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				DownloadBits ( null, Path, 15, AppCacheFile.Empty, null, Handler, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( State != null && State.Document != null && State.Document.HasValues )
						{
						string Message = State.Document.Value<string>( "message" );

						if ( string.IsNullOrEmpty ( Message ) )
							{
							var Video = State.Document["video"];

							if ( Video != null && Video.HasValues )
								{
								var Media = Video.Value<string>( "video_url" );
								var Image = Video.Value<string>( "image"     );

								Content = string.Format ( VideHtml, HttpUtility.UrlEncode ( Media ), Image );
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					AutoEvent.Set ();
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				AutoEvent.WaitOne ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetArticle</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static AppCacheFile ParseGetArticle ( Article Article, AppWebCache Cache, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Message = State.Document.Value<string>( "message" );

			if ( ! string.IsNullOrEmpty ( Message ) ) return AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var DetailedArticle = State.Document["detailedArticle"];
			
			if (DetailedArticle == null || ! DetailedArticle.HasValues) return AppCacheFile.Empty;

			Article.Load ( DetailedArticle );

			Article.Color = SectionToColor ( Article.SectionID );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Type = DetailedArticle.Value<string>( "type" );

			if ( Type.EqualsIgnoreCase ( "webview" ) ) return AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticle", "Page.html" );
			string ItemHtml = SR.GetResource ( "GetArticle", "Item.html" );
			string ImagHtml = SR.GetResource ( "GetArticle", "Imag.html" );
			string IvidHtml = SR.GetResource ( "GetArticle", "Ivid.html" );
			string LinkHtml = SR.GetResource ( "GetArticle", "Link.html" );
			string VideHtml = SR.GetResource ( "GetArticle", "Vide.html" );
			string EvidHtml = SR.GetResource ( "GetArticle", "Evid.html" );
			string SectHtml = SR.GetResource ( "GetArticle", "Sect.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Content = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Content += string.Format ( SectHtml, Article.Color, Article.SubSection );

			Content += string.Format ( ItemHtml, "date", string.Format ( "{0} &#224; {1}", 
				Article.PublishDate.ToString ( "dd/MM/yyyy" ), 
					Article.PublishDate.ToString ( "HH\\hmm" ) ) );

			if ( Article.UpdateDate != DateTime.MinValue )
				Content += string.Format ( ItemHtml, "edit_date", 
					string.Format ( "MAJ le {0} &#224; {1}", Article.UpdateDate.
					     ToString ( "dd/MM/yyyy" ), Article.UpdateDate.ToString ( "HH\\hmm" ) ) );

			Content += string.Format ( ItemHtml, "title", Article.Title );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Item = DetailedArticle["contents"].First;

			while ( Item != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( Item.Value<string>( "type" ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Image
					//-----------------------------------------------------------------------------------------------------------
					case "image" :
						{
						//-------------------------------------------------------------------------------------------------------
						var Element = Item["element"];

						string ImageUrl = Element.Value<string>( "image_url" );

						Content += string.Format ( ImagHtml, ImageUrl, HttpUtility.UrlEncode ( ImageUrl ) );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Intertitre
					//-----------------------------------------------------------------------------------------------------------
					case "intertitre" :
						{
						//-------------------------------------------------------------------------------------------------------
						string Element = Item.Value<string>( "element" );

						Element = Element.Replace ( "color:#", "_:#" );

						Content += string.Format ( ItemHtml, "intertitre", Element );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Chapitre
					//-----------------------------------------------------------------------------------------------------------
					case "chapo" :
						{
						//-------------------------------------------------------------------------------------------------------
						string Element = Item.Value<string>( "element" );

						Element = Element.Replace ( "color:#", "_:#" );

						Content += string.Format ( ItemHtml, "chapo", Element );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Vidéo
					//-----------------------------------------------------------------------------------------------------------
					case "video" :
						{
						//-------------------------------------------------------------------------------------------------------
						int Element = Item.Value<string>( "element" ).ToInteger ();

						Content += GetVideo ( Element, VideHtml, string.Format ( EvidHtml, Article.Uri ) );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					
					//-----------------------------------------------------------------------------------------------------------
					// Vidéo Externe
					//-----------------------------------------------------------------------------------------------------------
					case "external_video" :
						{
						//-------------------------------------------------------------------------------------------------------
						Content += string.Format ( IvidHtml, Item.Value<string>( "element" ) );
						
						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Contenue
					//-----------------------------------------------------------------------------------------------------------
					case "paragraphe" :
						{
						//-------------------------------------------------------------------------------------------------------
						string Element = Item.Value<string>( "element" );

						Element = Element.Replace ( "\r\n", "<br>" );
						Element = Element.Replace ( "\\\"", "\""   );

						Element = FixContent ( Element, LinkHtml );

						Content += string.Format ( ItemHtml, "paragraphe", Element );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Item = Item.Next;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string JSON = Article.UrlEncode ( "ArticleID"   , "Color"       , "Icon"        , 
											  "PublishDate" , "Section"     , "SectionID"   , 
											  "ShortUri"    , "SubSection"  , "SubSectionID", 
											  "Title"       , "UpdateDate"  , "Uri"         );

			if ( string.IsNullOrEmpty ( Article.Author ) ) Article.Author = "BFM Business";
			
			Content += string.Format ( ItemHtml, "author", string.Format ( "Auteur(s) : {0}", Article.Author ) );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Content = string.Format ( PageHtml, JSON, Article.Title, Content );

			Article.Content = Content;

			return Cache.Save ( ArticleToFile ( Article ), Article.LastModified, Content );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void AsyncGetArticle ( RestEventHandler OnComplete, bool AllowCache, 
		                                                  Article Article, AppCacheFile CacheFile )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// L'article est il enregistré ?
			//-------------------------------------------------------------------------------------------------------------------
			Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );

			if ( Article.IsMarked && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Bookmarks = AppBookmarks.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article Bookmark = Bookmarks.Get<Article> ( Article.ArticleID );

					if ( Bookmark != null && ! string.IsNullOrEmpty ( Bookmark.Content ) )
						{
						Article.CopyFrom ( Bookmark );

						OnComplete ( null, new RestEventArgs ( Article, InsertSheets ( Bookmark.Content ) ) );

						return;
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Initialisation
			//-------------------------------------------------------------------------------------------------------------------
			string Path = "getDetailedArticle?format=rich&article=" + Article.ArticleID;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Exécution
			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Article, Path, 20, CacheFile, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					RestService.LastTokenUse = DateTime.Now;

					AppCacheFile NewEntry = ParseGetArticle ( Article, Cache, State );

					if ( NewEntry.IsEmpty )
						{
						State.PostAnomaly ( RestRequestResult.NotFound );
						}
					else
						{
						RegisterArticle ( Article );

						State.PostOperationComplete ( InsertSheets ( NewEntry.Content, false ) );
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetArticle</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticle ( RestEventHandler OnComplete, bool AllowCache, Article Article )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = Article.LastModified;
			string       FileName   = ArticleToFile ( Article );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( FileName, ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article.Load ( ExtractMeta ( Entry.Content, "article" ) );

				Article.Content  = Entry.Content;
				Article.IsMarked = AppBookmarks.IsMarked ( Article.ArticleID );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				RegisterArticle ( Article );

				OnComplete ( null, new RestEventArgs ( Article, InsertSheets ( Entry.Content ) ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else if ( string.IsNullOrEmpty ( TokenID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( Article, Entry, (S, A) => 
					{ AsyncGetArticle ( OnComplete, AllowCache, Article, Entry ); }, OnComplete );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetArticle ( OnComplete, AllowCache, Article, Entry ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetBookmarks
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		/// <param name="Callback">Est appelé si l'appel réussi.</param>
		/// <param name="OnComplete">Est appelé si l'appel échou.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetBookmarks ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );

			string   Content     = string.Empty;
			DateTime CurrentDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			using ( var Bookmarks = AppBookmarks.GetForApplication () )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Items = Bookmarks.GetEnumerator<Article> ();
				
				foreach ( var Item in Items.Keys )
					{
					//-----------------------------------------------------------------------------------------------------------
					DateTime BookmarkDate = Items[Item];
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Séparateur
					//-----------------------------------------------------------------------------------------------------------
					if ( CurrentDate.Date != BookmarkDate.Date )
						{
						//-------------------------------------------------------------------------------------------------------
						CurrentDate = BookmarkDate.Date;

						Content += string.Format ( DateHtml, WebUtility.HtmlEncode ( 
									    CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else { Content += SepaHtml; }
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( string.IsNullOrEmpty ( Item.Color ) )
						Item.Color = SectionToColor ( Item.SectionID );

					string LongArticleUri  = Item.UrlEncode ( "ArticleID"   , "Color"       ,
															  "Icon"        , "IsHeadline"  , 
															  "PageIndex"   , "PublishDate" , 
															  "Section"     , "SectionID"   , 
															  "ShortUri"    , "SubSection"  , 
															  "SubSectionID", "Title"       , 
															  "UpdateDate"  , "Uri"         );
					string ShortArticleUri = Item.UrlEncode ( "ArticleID"   , "LastModified",
															  "Uri"                         );

					Content += string.Format ( ItemHtml, LongArticleUri                         ,
														 ShortArticleUri                        ,
														 ""                                     ,
														 Item.Icon                              ,
														 Item.ArticleID                         ,
														 ""                                     ,
														 Item.Color                             ,
														 Item.SubSection                        ,
														 Item.LastModified.ToString ( "HH\\hmm" ),
														 Item.Title                             );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = InsertSheets ( SR.GetResource ( "GetArticlesList", "404.html" ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				Content = InsertSheets ( string.Format ( PageHtml, AppTitle, Content, string.Empty ) );

				OnComplete ( null, new RestEventArgs ( SectionType.Bookmarks, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetArticlesList
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Extrait les articles à la UNE.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ParseHeadlines ( List<string> ArticlesID, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Message = State.Document.Value<string>( "message" );

			if ( ! string.IsNullOrEmpty ( Message ) ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Articles = State.Document["articles"];
			
			if ( Articles == null || ! Articles.HasValues ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Content  = string.Empty;
			string HeadHtml = SR.GetResource ( "GetArticlesList", "Head.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Lecture des Articles
			//-------------------------------------------------------------------------------------------------------------------
			foreach ( var Item in SortedArticles.FromJSON ( Articles.First ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				ArticlesID.Add ( Item.ArticleID );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Item.PageIndex  = 0;
				Item.IsHeadline = true;
				Item.Color      = SectionToColor ( Item.SectionID );

				string LongArticleUri  = Item.UrlEncode ( "ArticleID"   , "Color"       ,
														  "Icon"        , "IsHeadline"  , 
														  "PageIndex"   , "PublishDate" , 
														  "Section"     , "SectionID"   , 
														  "ShortUri"    , "SubSection"  , 
														  "SubSectionID", "Title"       , 
														  "UpdateDate"  , "Uri"         );
				string ShortArticleUri = Item.UrlEncode ( "ArticleID"   , "Uri"         );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( Content ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					Content += SepaHtml;

					Content += string.Format ( ItemHtml, LongArticleUri ,
														 ShortArticleUri,
														 "headline"     ,
														 Item.Icon      ,
														 Item.ArticleID , 
														 "A LA UNE"     ,
														 Item.Color     ,
														 Item.SubSection,
														 ""             ,
														 Item.Title     );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					Content += string.Format ( HeadHtml, LongArticleUri ,
														 ShortArticleUri,
														 Item.Icon      ,
														 Item.Title     );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Extrait les articles de la liste.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ParseArticles ( SectionType Type, List<string> ArticlesID, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Message = State.Document.Value<string>( "message" );

			if ( ! string.IsNullOrEmpty ( Message ) ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Articles = State.Document["articles"];
			
			if ( Articles == null || ! Articles.HasValues ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string   Content     = string.Empty;
			DateTime CurrentDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Chargement des Articles
			//-------------------------------------------------------------------------------------------------------------------
			foreach ( var Item in SortedArticles.FromJSON ( Articles.First ).Sort () )
				{
				//---------------------------------------------------------------------------------------------------------------
				int ExistsIndex = ArticlesID.IndexOf ( Item.ArticleID );

				if ( ExistsIndex >= 0 && ExistsIndex < 3 ) continue;
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				// Séparateur
				//---------------------------------------------------------------------------------------------------------------
				if ( CurrentDate.Date != Item.LastModified.Date )
					{
					if ( Type == SectionType.All && CurrentDate == DateTime.MinValue )
						{
						CurrentDate = Item.LastModified.Date;

						Content += string.Format ( DateHtml, "Les Derniers Articles" );
						}
					else
						{
						CurrentDate = Item.LastModified.Date;

						Content += string.Format ( DateHtml, WebUtility.HtmlEncode ( 
						                CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
						}
					}
				else { Content += SepaHtml; }
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Article
				//---------------------------------------------------------------------------------------------------------------
				Item.PageIndex  = 1;
				Item.IsHeadline = false;
				Item.Color      = SectionToColor ( Item.SectionID );

				string LongArticleUri  = Item.UrlEncode ( "ArticleID"   , "Color"       ,
														  "Icon"        , "IsHeadline"  , 
														  "PageIndex"   , "PublishDate" , 
														  "Section"     , "SectionID"   , 
														  "ShortUri"    , "SubSection"  , 
														  "SubSectionID", "Title"       , 
														  "UpdateDate"  , "Uri"         );
				string ShortArticleUri = Item.UrlEncode ( "ArticleID"   , "LastModified",
				                                          "Uri"                         );

				Content += string.Format ( ItemHtml, LongArticleUri                         ,
				                                     ShortArticleUri                        ,
				                                     ""                                     ,
													 Item.Icon                              ,
				                                     Item.ArticleID                         ,
													 ""                                     ,
													 Item.Color                             ,
				                                     Item.SubSection                        ,
				                                     Item.LastModified.ToString ( "HH\\hmm" ),
				                                     Item.Title                             );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Traite la demande de liste d'une section avec la UNE.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void ParseGetLastArticles ( DownloadBitsState State          , 
		                                           RestRequestResult HeadlinesResult, 
												   DownloadBitsState HeadlinesState , 
												   RestRequestResult ArticlesResult , 
												   DownloadBitsState ArticlesState  )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			RestService.LastTokenUse = DateTime.Now;

			int    HeadlinesCount      = 4;
			string Content             = string.Empty;
			string HeadlinesContent    = string.Empty;
			string ArticlesListContent = string.Empty;
			var    ArticlesID          = new List<string> ();
			string PageHtml            = SR.GetResource ( "GetArticlesList", "Page.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			using ( var Cache = AppWebCache.GetForApplication () )
				{
				//---------------------------------------------------------------------------------------------------------------
				// Chargement de la UNE
				//---------------------------------------------------------------------------------------------------------------
				if ( HeadlinesResult == RestRequestResult.Success )
					HeadlinesContent = ParseHeadlines ( ArticlesID, HeadlinesState );

				if ( string.IsNullOrEmpty ( HeadlinesContent ) )
					{
					HeadlinesResult = RestRequestResult.EmptyResponse;

					AppCacheFile Entry = AppCacheFile.Empty;

					if ( AppWebCache.Find ( "SECTION-ALL-HEADLINES.PART", out Entry ) )
						HeadlinesContent = Entry.Content;
					}
				else { Cache.Save ( "SECTION-ALL-HEADLINES.PART", HeadlinesContent ); }
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Chargement des Articles
				//---------------------------------------------------------------------------------------------------------------
				if ( ArticlesResult == RestRequestResult.Success )
					ArticlesListContent = ParseArticles ( SectionType.All, ArticlesID, ArticlesState );

				if ( string.IsNullOrEmpty ( ArticlesListContent ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					ArticlesResult = RestRequestResult.EmptyResponse;

					AppCacheFile Entry = AppCacheFile.Empty;

					if ( AppWebCache.Find ( "SECTION-ALL-CONTENT.PART", out Entry ) )
						ArticlesListContent = Entry.Content;
					//-----------------------------------------------------------------------------------------------------------
					}
				else { Cache.Save ( "SECTION-ALL-CONTENT.PART", ArticlesListContent ); }
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				bool HeadlinesOK    = ( ! string.IsNullOrEmpty ( HeadlinesContent    ) );
				bool ArticlesListOK = ( ! string.IsNullOrEmpty ( ArticlesListContent ) );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Les 2 listes sont renseignées
				//---------------------------------------------------------------------------------------------------------------
				if ( HeadlinesOK && ArticlesListOK )
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( StringReader Sr = new StringReader ( HeadlinesContent ) )
						{
						string Line  = string.Empty;

						while ( ( Line = Sr.ReadLine () ) != null )
							{
							Content += ( Line + "\r\n" );

							if ( Line.StartsWith ( "<li><article>" ) )
								if ( -- HeadlinesCount == 0 ) break;
							}
						}

					Content += ArticlesListContent;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// On a pas tout, mais on fait avec
				//---------------------------------------------------------------------------------------------------------------
				else if ( HeadlinesOK    ) { Content = HeadlinesContent;    }
				else if ( ArticlesListOK ) { Content = ArticlesListContent; }
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Tout est ok et récent
				//---------------------------------------------------------------------------------------------------------------
				if ( HeadlinesResult == RestRequestResult.Success && 
				     ArticlesResult  == RestRequestResult.Success )
					{
					//-----------------------------------------------------------------------------------------------------------
					Cache.Save ( "SECTION-ALL.PART", Content );

					string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

					Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

					AppCacheFile NewEntry = Cache.Save ( "SECTION-ALL.HTML", Content );

					State.PostOperationComplete ( InsertSheets ( Content, true ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Le chargement est incomplet, mais on a du contenue
				//---------------------------------------------------------------------------------------------------------------
				else if ( ! string.IsNullOrEmpty ( Content ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					Content = string.Format ( PageHtml, AppTitle, Content, string.Empty );

					State.PostAnomaly ( RestRequestResult.PartialContent, 
					                                              InsertSheets ( Content, true ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// On a rien à afficher :(
				//---------------------------------------------------------------------------------------------------------------
				else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Traite la demande de liste d'une section sans la UNE.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void ParseGetArticlesList ( SectionType Type, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			RestService.LastTokenUse = DateTime.Now;

			string Content = ParseArticles ( Type, new List<string> (), State );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Tout est ok et récent
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( Content ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
					string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Cache.Save ( SectionToPart ( Type ), Content );

					Content = string.Format ( PageHtml, AppTitle, Content, PrevHtml );

					AppCacheFile NewEntry = Cache.Save ( SectionToFile ( Type ), Content );

					State.PostOperationComplete ( InsertSheets ( Content, true ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On a rien à afficher :(
			//-------------------------------------------------------------------------------------------------------------------
			else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void AsyncGetArticlesList ( RestEventHandler OnComplete, SectionType Type, AppCacheFile CacheFile )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Tous les articles avec la Une
			//-------------------------------------------------------------------------------------------------------------------
			if ( Type == SectionType.All && RestService.LoadHeadlines )
				{
				//---------------------------------------------------------------------------------------------------------------
				// Initialisation
				//---------------------------------------------------------------------------------------------------------------
				string Path = "getHeadlines";
				string Next = "getLastArticles?count=40&page=1";

				DownloadBitsState AsyncState = new DownloadBitsState ( Type      , 
				                                                       CacheFile , 
																	   null      , 
																	   OnComplete, 
																	   null      );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Gestion des Articles
				//---------------------------------------------------------------------------------------------------------------
		        RestEventHandler ArticlesListError = ( S, A ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					DownloadBitsState HeadlinesState = S as DownloadBitsState;

					RestRequestResult HeadlinesResult = ( HeadlinesState == null ) ? 
					                   RestRequestResult.EmptyResponse : RestRequestResult.Success;

					ParseGetLastArticles ( AsyncState, HeadlinesResult, HeadlinesState, RestRequestResult.EmptyResponse, null );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsCallback ArticlesListSuccess = ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					DownloadBitsState HeadlinesState = State.UserToken as DownloadBitsState;

					RestRequestResult HeadlinesResult = ( HeadlinesState == null ) ? 
					                   RestRequestResult.EmptyResponse : RestRequestResult.Success;

					ParseGetLastArticles ( AsyncState, HeadlinesResult, HeadlinesState, RestRequestResult.Success, State );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Gestion de la UNE
				//---------------------------------------------------------------------------------------------------------------
		        RestEventHandler HeadlinesError = ( S, A ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					DownloadBits ( Type, Next, 15, null, null, ArticlesListError, ArticlesListSuccess );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------
				DownloadBitsCallback HeadlinesSuccess = ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					DownloadBits ( Type, Next, 15, null, State, ArticlesListError, ArticlesListSuccess );
					//-----------------------------------------------------------------------------------------------------------
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Exécution
				//---------------------------------------------------------------------------------------------------------------
				DownloadBits ( null, Path, 15, CacheFile, null, HeadlinesError, HeadlinesSuccess );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Liste d'articles spécifique
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				// Initialisation
				//---------------------------------------------------------------------------------------------------------------
				string Path = "getLastArticles?count=40&page=1";

				switch ( Type )
					{
					//-----------------------------------------------------------------------------------------------------------
					case SectionType.Banking      : 
						Path = "getArticlesList?category=468726&count=40&page=1"; break; // 468726
					case SectionType.Construction : 
						Path = "getArticlesList?category=468725&count=40&page=1"; break; // 468725
					case SectionType.Culture      : 
						Path = "getArticlesList?category=468727&count=40&page=1"; break; // 468727
					case SectionType.Distribution : 
						Path = "getArticlesList?category=468730&count=40&page=1"; break; // 468730
					case SectionType.Employment   : 
						Path = "getArticlesList?category=468722&count=40&page=1"; break; // 468722
					case SectionType.Energy       : 
						Path = "getArticlesList?category=468729&count=40&page=1"; break; // 468729
					case SectionType.France       : 
						Path = "getArticlesList?category=468720&count=40&page=1"; break; // 468720
					case SectionType.Industry     : 
						Path = "getArticlesList?category=468733&count=40&page=1"; break; // 468733
					case SectionType.Innovation   : 
						Path = "getArticlesList?category=468724&count=40&page=1"; break; // 468724
					case SectionType.Observatory  : 
						Path = "getArticlesList?category=468734&count=40&page=1"; break; // 468734
					case SectionType.Sport        : 
						Path = "getArticlesList?category=468728&count=40&page=1"; break; // 468728
					case SectionType.Tourism      : 
						Path = "getArticlesList?category=468732&count=40&page=1"; break; // 468732
					case SectionType.Transport    : 
						Path = "getArticlesList?category=468731&count=40&page=1"; break; // 468731
					case SectionType.World        : 
						Path = "getArticlesList?category=468721&count=40&page=1"; break; // 468721
					case SectionType.YourMoney    :
						Path = "getArticlesList?category=468723&count=40&page=1"; break; // 468723
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Exécution
				//---------------------------------------------------------------------------------------------------------------
				DownloadBits ( Type, Path, 20, CacheFile, null, OnComplete, ( State ) =>
					{
					//-----------------------------------------------------------------------------------------------------------
					ParseGetArticlesList ( Type, State );
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>RegisterApp</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetArticlesList ( RestEventHandler OnComplete, bool AllowCache,SectionType Type )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AppCacheFile Entry      = AppCacheFile.Empty;
			DateTime     ExpireDate = DateTime.Now.AddMinutes ( -15 );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// A t'on du cache de disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( AppWebCache.Find ( SectionToFile ( Type ), ExpireDate, out Entry ) && AllowCache )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = InsertSheets ( Entry.Content, true );

				OnComplete ( null, new RestEventArgs ( Type, Content ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Pas de cache et on est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			else if ( string.IsNullOrEmpty ( TokenID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( Type, Entry, (S, A) =>
					{ AsyncGetArticlesList ( OnComplete, Type, Entry ); }, OnComplete );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetArticlesList ( OnComplete, Type, Entry ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // GET => Procédure GetPreviousArticlesList
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Traitement de la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ParseGetPreviousArticlesList ( SectionType Type, AppWebCache Cache, 
		                   SortedArticles SortedArticles, long PageIndex, DownloadBitsState State )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( State == null || State.Document == null || ! State.Document.HasValues )
				return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string Message = State.Document.Value<string>( "message" );

			if ( ! string.IsNullOrEmpty ( Message ) ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Articles = State.Document["articles"];
			
			if ( Articles == null || ! Articles.HasValues ) return string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
			string DateHtml = SR.GetResource ( "GetArticlesList", "Date.html" );
			string SepaHtml = SR.GetResource ( "GetArticlesList", "Sepa.html" );
			string ItemHtml = SR.GetResource ( "GetArticlesList", "Item.html" );
			string HeadHtml = SR.GetResource ( "GetArticlesList", "Head.html" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string   Content     = string.Empty;
			DateTime CurrentDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Chargement des Articles
			//-------------------------------------------------------------------------------------------------------------------
			foreach ( var Item in SortedArticles.Combine ( Articles.First ).Sort () )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Item.PageIndex == -1 ) Item.PageIndex = PageIndex;

				Item.Color = SectionToColor ( Item.SectionID );

				string LongArticleUri  = Item.UrlEncode ( "ArticleID"   , "Color"       ,
														  "Icon"        , "IsHeadline"  , 
														  "PageIndex"   , "PublishDate" , 
														  "Section"     , "SectionID"   , 
														  "ShortUri"    , "SubSection"  , 
														  "SubSectionID", "Title"       , 
														  "UpdateDate"  , "Uri"         );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Headline
				//---------------------------------------------------------------------------------------------------------------
				if ( Item.IsHeadline )
					{
					//-----------------------------------------------------------------------------------------------------------
					string ShortArticleUri = Item.UrlEncode ( "ArticleID", "Uri" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( Content ) )
						{
						//-------------------------------------------------------------------------------------------------------
						Content += SepaHtml;

						Content += string.Format ( ItemHtml, LongArticleUri ,
															 ShortArticleUri,
															 "headline"     ,
															 Item.Icon      ,
															 Item.ArticleID , 
														     "A LA UNE"     ,
															 Item.Color     ,
															 Item.SubSection,
															 ""             ,
															 Item.Title     );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						Content += string.Format ( HeadHtml, LongArticleUri ,
														     ShortArticleUri,
						                                     Item.Icon      ,
						                                     Item.Title     );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Articles
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					// Séparateur
					//-----------------------------------------------------------------------------------------------------------
					if ( CurrentDate.Date != Item.LastModified.Date )
						{
						if ( Type == SectionType.All && CurrentDate == DateTime.MinValue )
							{
							CurrentDate = Item.LastModified.Date;

							Content += string.Format ( DateHtml, "Les Derniers Articles" );
							}
						else
							{
							CurrentDate = Item.LastModified.Date;

							Content += string.Format ( DateHtml, WebUtility.HtmlEncode 
							          ( CurrentDate.ToString ( "dddd dd MMMM" ).ToTitleCase () ) );
							}
						}
					else { Content += SepaHtml; }
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					Item.Color = SectionToColor ( Item.SectionID );

					string ShortArticleUri = Item.UrlEncode ( "ArticleID", "LastModified", "Uri" );

					Content += string.Format ( ItemHtml, LongArticleUri                         ,
														 ShortArticleUri                        ,
														 ""                                     ,
														 Item.Icon                              ,
														 Item.ArticleID                         , 
														 ""                                     ,
														 Item.Color                             ,
														 Item.SubSection                        ,
														 Item.LastModified.ToString ( "HH\\hmm" ),
														 Item.Title                             );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Content;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void AsyncGetPreviousArticlesList ( SectionType Type, RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			long           PageIndex      = 1;
			AppCacheFile   Entry          = AppCacheFile.Empty;
			SortedArticles SortedArticles = new SortedArticles ();

			if ( AppWebCache.Find ( SectionToPart ( Type ), DateTime.MinValue, out Entry ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( StringReader Sr = new StringReader ( Entry.Content ) )
					{
					string Line = string.Empty;

					while ( ( Line = Sr.ReadLine () ) != null )
						{
						if ( Line.StartsWith ( "<!--" ) )
							{
							var Item = Article.Parse ( Line.Substring ( 4, Line.Length - 7 ).Trim () );

							if ( Item != null )
								{
								SortedArticles.Add ( Item );

								PageIndex = Math.Max ( Item.PageIndex, PageIndex );
								}
							}
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Path = "getLastArticles?count=40&page={0}";

			switch ( Type )
				{
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.Banking      : 
					Path = "getArticlesList?category=468726&count=40&page={0}"; break; // 468726
				case SectionType.Construction : 
					Path = "getArticlesList?category=468725&count=40&page={0}"; break; // 468725
				case SectionType.Culture      : 
					Path = "getArticlesList?category=468727&count=40&page={0}"; break; // 468727
				case SectionType.Distribution : 
					Path = "getArticlesList?category=468730&count=40&page={0}"; break; // 468730
				case SectionType.Employment   : 
					Path = "getArticlesList?category=468722&count=40&page={0}"; break; // 468722
				case SectionType.Energy       : 
					Path = "getArticlesList?category=468729&count=40&page={0}"; break; // 468729
				case SectionType.France       : 
					Path = "getArticlesList?category=468720&count=40&page={0}"; break; // 468720
				case SectionType.Industry     : 
					Path = "getArticlesList?category=468733&count=40&page={0}"; break; // 468733
				case SectionType.Innovation   : 
					Path = "getArticlesList?category=468724&count=40&page={0}"; break; // 468724
				case SectionType.Observatory  : 
					Path = "getArticlesList?category=468734&count=40&page={0}"; break; // 468734
				case SectionType.Sport        : 
					Path = "getArticlesList?category=468728&count=40&page={0}"; break; // 468728
				case SectionType.Tourism      : 
					Path = "getArticlesList?category=468732&count=40&page={0}"; break; // 468732
				case SectionType.Transport    : 
					Path = "getArticlesList?category=468731&count=40&page={0}"; break; // 468731
				case SectionType.World        : 
					Path = "getArticlesList?category=468721&count=40&page={0}"; break; // 468721
				case SectionType.YourMoney    :
					Path = "getArticlesList?category=468723&count=40&page={0}"; break; // 468723
				//---------------------------------------------------------------------------------------------------------------
				}

			Path = string.Format ( Path, ++PageIndex );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DownloadBits ( Type, Path, 20, AppCacheFile.Empty, null, OnComplete, ( State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				string Content = string.Empty;
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				using ( var Cache = AppWebCache.GetForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					Content = ParseGetPreviousArticlesList ( Type, Cache, SortedArticles, PageIndex, State );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( Content ) )
						{
						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la partie PART
						//-------------------------------------------------------------------------------------------------------
						Cache.Save ( SectionToPart ( Type ), Content );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Sauvegarde de la page complète
						//-------------------------------------------------------------------------------------------------------
						string PageHtml = SR.GetResource ( "GetArticlesList", "Page.html" );
						string PrevHtml = SR.GetResource ( "GetArticlesList", "Prev.html" );

						Cache.Save ( SectionToFile ( Type ), string.Format ( PageHtml , 
						                                                     AppTitle , 
																			 Content  , 
																			 PrevHtml ) );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				State.PostOperationComplete ( Content );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetPreviousArticlesList</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetPreviousArticlesList ( SectionType Type, RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// On est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( TokenID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( Type, AppCacheFile.Empty, (S, A) =>
					{ AsyncGetPreviousArticlesList ( Type, OnComplete ); }, OnComplete );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetPreviousArticlesList ( Type, OnComplete ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // GET => Procédure GetLive
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel asynchrone à la procédure <b>GetLive</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void AsyncGetLive ( RestEventHandler OnComplete, int EmergencyIndex )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			DownloadBitsState State = new DownloadBitsState ( SectionType.Live  , 
			                                                  AppCacheFile.Empty, 
															  null              , 
															  OnComplete        , 
															  null              );
			RestWebRequest Request = RestWebRequest.Create ();

			Request.Headers["User-Agent"] = UserAgent;

			//string Path = "http://bfmlive-i.akamaihd.net/hls/live/254438/876450612001/DVMR_BFMBusiness2/master-2.m3u8";

			//string Path = BaseUri + TokenID + "/getLiveUrl?device=IPHONE";

			string Path = "https://bfmbusisecure-i.akamaihd.net/hls/live/265375/876450612001/BFMBusinessS/audio_0_fra/audio_0_fra.m3u8";
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Async ( ( Sender, Args ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Stream    = Args.Stream;
					State.Request   = Args.Request;
					State.Response  = Args.Response;
					State.Exception = Args.Exception;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Args.Stream != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Stream.CanRead )
							{
							//---------------------------------------------------------------------------------------------------
							using ( StreamReader Tr = new StreamReader ( Args.Stream ) )
								{
								State.StreamBuffer = Tr.ReadToEnd ();
								}

							State.PostOperationComplete ( State.StreamBuffer, Args.Response.ResponseUri );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Exception != null )
						{
						//-------------------------------------------------------------------------------------------------------
						RestRequestResult Result = RestRequestResult.ServiceUnavailable;
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Exception is WebException )
							{
							//---------------------------------------------------------------------------------------------------
							WebException Exception = Args.Exception as WebException;
							//---------------------------------------------------------------------------------------------------
					
							//---------------------------------------------------------------------------------------------------
							if ( Exception.Response is HttpWebResponse )
								{
								//-----------------------------------------------------------------------------------------------
								HttpWebResponse Response = Exception.Response as HttpWebResponse;

								if ( Response.StatusCode == HttpStatusCode.Unauthorized        )
									{
									Result = RestRequestResult.Unauthorized;
									}
								else if ( Response.StatusCode == HttpStatusCode.Forbidden      )
									{
									Result = RestRequestResult.Forbidden;
									}
								else if ( Response.StatusCode == HttpStatusCode.NotFound       )
									{
									Result = RestRequestResult.NotFound;
									}
								else if ( Response.StatusCode == HttpStatusCode.RequestTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								else if ( Response.StatusCode == HttpStatusCode.GatewayTimeout )
									{
									Result = RestRequestResult.Timeout;
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ReceiveFailure )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.EmptyResponse;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( Exception.Status == WebExceptionStatus.ProtocolError )
								{
								//-----------------------------------------------------------------------------------------------
								Result = RestRequestResult.NotFound;
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							else if ( ! string.IsNullOrEmpty ( Exception.Message ) )
								{
								//-----------------------------------------------------------------------------------------------
								if ( Exception.Message.IndexOf ( "NotFound" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.NotFound;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								else if ( Exception.Message.IndexOf ( "Timeout" ) != -1 )
									{
									//-------------------------------------------------------------------------------------------
									Result = RestRequestResult.Timeout;
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( EmergencyIndex <= 3 )
							{
							State.PostCallback ( ( _ ) =>
								{ AsyncGetLive ( OnComplete, ++ EmergencyIndex ); } );
							}
						else { State.PostAnomaly ( Result ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Args.IsRedirected && Args.Response != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Args.Response.ResponseUri != null )
							{
							State.PostOperationComplete ( Args.Response.ResponseUri.OriginalString );
							}
						//-------------------------------------------------------------------------------------------------------
						else { State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.IsRedirected && Args.ResponseUri != null )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( ! Args.ResponseUri.OriginalString.EndsWith ( "m3u8" ) )
							{
							Args.Cancel = true;

							State.PostAnomaly ( Args.ResponseUri );
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( Args.Response == null )
						{ State.PostAnomaly ( RestRequestResult.EmptyResponse ); }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch ( Exception Err )
					{
					//-----------------------------------------------------------------------------------------------------------
					State.Exception = Err;

					State.PostAnomaly ( RestRequestResult.InternalException );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				}, new Uri ( Path ), null );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure <b>GetLive</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void GetLive ( RestEventHandler OnComplete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// On est pas initialisé
			//-------------------------------------------------------------------------------------------------------------------
			if ( string.IsNullOrEmpty ( TokenID ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				RegisterApp ( SectionType.Live, AppCacheFile.Empty, (S, A) =>
					{ AsyncGetLive ( OnComplete, 1 ); }, OnComplete );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On est initialisé et on a pas de cache, donc on récupère
			//-------------------------------------------------------------------------------------------------------------------
			else { AsyncGetLive ( OnComplete, 1 ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
			
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // >> LoadHeadlines
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique s'il faut charger la UNE.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool LoadHeadlines
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "headlines", true  ); }
			set {        StorageSettings.SetValue ( "headlines", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> MediaQuality
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Obtiens ou définit la qualité des vidéos.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static MediaQuality MediaQuality
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (MediaQuality)StorageSettings.GetValue ( "media-quality", (int)MediaQuality.High ); }
			//-------------------------------------------------------------------------------------------------------------------
			set
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( value != RestService.MediaQuality )
					{
					//-----------------------------------------------------------------------------------------------------------
					StorageSettings.SetValue ( "media-quality", (int)value );

					StyleSheets.Clear ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // >> UseCompression
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique s'il faut compresser les échanges.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool UseCompression
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return StorageSettings.GetValue ( "use-compression", true  ); }
			set {        StorageSettings.SetValue ( "use-compression", value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextRadio.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
