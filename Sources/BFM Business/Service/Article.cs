//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Article.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet Article
// Créé le       : 29/06/2015
// Modifié le    : 07/08/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Net;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Newtonsoft.Json.Linq;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextRadio.Service"
//*******************************************************************************************************************************
namespace NextRadio.Service
	{

	//   ###   ####   #####  #   ###   #      #####
	//  #   #  #   #    #    #  #   #  #      #    
	//  #####  ####     #    #  #      #      ###  
	//  #   #  #   #    #    #  #   #  #      #    
	//  #   #  #   #    #    #   ###   #####  #####

	//***************************************************************************************************************************
	// Classe Article
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit un article.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	[DataContract]
	public class Article
		{
		//***********************************************************************************************************************
		#region // Procédure Value => IDictionary
		//-----------------------------------------------------------------------------------------------------------------------
		private static string Value ( IDictionary<string, string> Self, string Name, string Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return ( Self.ContainsKey ( Name ) ) ? Self[Name] : Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Procédure Value => JToken
		//-----------------------------------------------------------------------------------------------------------------------
		private static T Value<T> ( JToken Token, string Name, T Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				JValue Value = Token.Value<JValue> ( Name );

				return ( Value != null && Value.Value != null && Value.Value is T ) ? (T)Value.Value : Default;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Article ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID    = string.Empty;
			this.Author       = string.Empty;
			this.Color        = string.Empty;
			this.Content      = string.Empty;
			this.Icon         = string.Empty;
			this.IsHeadline   = false;
			this.IsMarked     = false;
			this.PageIndex    = -1;
			this.PublishDate  = DateTime.MinValue;
			this.Section      = string.Empty;
			this.SectionID    = 0;
			this.ShortUri     = string.Empty;
			this.SubSection   = string.Empty;
			this.SubSectionID = 0;
			this.Title        = string.Empty;
			this.UpdateDate   = DateTime.MinValue;
			this.Uri          = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( string Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( JToken Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Article</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private Article ( IDictionary<string, string> Value ) : this () { this.Load ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void CopyFrom ( Article Value )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID    = Value.ArticleID;
			this.Author       = Value.Author;
			this.Color        = Value.Color;
			this.Content      = Value.Content;
			this.Icon         = Value.Icon;
			this.IsHeadline   = Value.IsHeadline;
			this.PageIndex    = Value.PageIndex;
			this.PublishDate  = Value.PublishDate;
			this.Section      = Value.Section;
			this.SectionID    = Value.SectionID;
			this.ShortUri     = Value.ShortUri;
			this.SubSection   = Value.SubSection;
			this.SubSectionID = Value.SubSectionID;
			this.Title        = Value.Title;
			this.UpdateDate   = Value.UpdateDate;
			this.Uri          = Value.Uri;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( string Value ) { this.Load ( Value.QueryString () ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le noeud JSON.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( JToken Token )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.PublishDate  = Token.Read<DateTime>( "date"      );
			this.UpdateDate   = Token.Read<DateTime>( "edit_date" );

			if ( this.UpdateDate <= this.PublishDate ) this.UpdateDate = DateTime.MinValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID    = Value<long  >( Token, "article"      , 0     ).ToString ();
			this.Author       = Value<string>( Token, "author"       , this.Author       );
			this.Icon         = Value<string>( Token, "image_url"    , this.Icon         );
			this.Section      = Value<string>( Token, "section"      , this.Section      );
			this.SectionID    = Value<long  >( Token, "section_id"   , this.SectionID    );
			this.ShortUri     = Value<string>( Token, "short_url"    , this.ShortUri     );
			this.SubSection   = Value<string>( Token, "subsection"   , this.SubSection   );
			this.SubSectionID = Value<long  >( Token, "subsection_id", this.SubSectionID );
			this.Title        = Value<string>( Token, "title"        , this.Title        );
			this.Uri          = Value<string>( Token, "long_url"     , this.Uri          );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			this.Author     = HttpUtility.HtmlDecode ( this.Author     );
			this.Section    = HttpUtility.HtmlDecode ( this.Section    );
			this.SubSection = HttpUtility.HtmlDecode ( this.SubSection );
			this.Title      = HttpUtility.HtmlDecode ( this.Title      );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Load ( IDictionary<string, string> QueryString )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ArticleID    = Value ( QueryString, "ArticleID" , this.ArticleID  );
			this.Author       = Value ( QueryString, "Author"    , this.Author     );
			this.Color        = Value ( QueryString, "Color"     , this.Color      );
			this.Icon         = Value ( QueryString, "Icon"      , this.Icon       );
			this.Section      = Value ( QueryString, "Section"   , this.Section    );
			this.ShortUri     = Value ( QueryString, "ShortUri"  , this.ShortUri   );
			this.SubSection   = Value ( QueryString, "SubSection", this.SubSection );
			this.Title        = Value ( QueryString, "Title"     , this.Title      );
			this.Uri          = Value ( QueryString, "Uri"       , this.Uri        );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// IsHeadline
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "IsHeadline" ) )
				this.IsHeadline = QueryString["IsHeadline"].IsTrue ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// PageIndex
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "PageIndex" ) )
				this.PageIndex = QueryString["PageIndex"].ToInteger ();
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// SectionID
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "SectionID" ) )
				this.SectionID = QueryString["SectionID"].ToInteger ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// SubSectionID
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "SubSectionID" ) )
				this.SubSectionID = QueryString["SubSectionID"].ToInteger ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// PublishDate
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "PublishDate" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				DateTime PublishDate = DateTime.MinValue;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( QueryString["PublishDate"].Length == 12 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["PublishDate"], "yyyyMMddHHmm", 
					                                 null, DateTimeStyles.None, out PublishDate ) )
						this.PublishDate = PublishDate;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( QueryString["PublishDate"].Length == 14 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["PublishDate"], "yyyyMMddHHmmss", 
					                                 null, DateTimeStyles.None, out PublishDate ) )
						this.PublishDate = PublishDate.AddSeconds ( - PublishDate.Second );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// UpdateDate
			//-------------------------------------------------------------------------------------------------------------------
			if ( QueryString.ContainsKey ( "UpdateDate" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				DateTime UpdateDate = DateTime.MinValue;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( QueryString["UpdateDate"].Length == 12 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["UpdateDate"], "yyyyMMddHHmm", 
					                                  null, DateTimeStyles.None, out UpdateDate ) )
						this.UpdateDate = UpdateDate;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( QueryString["UpdateDate"].Length == 14 )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( DateTime.TryParseExact ( QueryString["UpdateDate"], "yyyyMMddHHmmss", 
					                                  null, DateTimeStyles.None, out UpdateDate ) )
						this.UpdateDate = UpdateDate.AddSeconds ( - UpdateDate.Second );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string UrlEncode ( params string[] Names )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			NameValueCollection Result = new NameValueCollection ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			foreach ( string Name in Names )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( Name )
					{
					//-----------------------------------------------------------------------------------------------------------
					case "ArticleID"    : Result["ArticleID" ] = this.ArticleID;  break;
					case "Author"       : Result["Author"    ] = this.Author;     break;
					case "Color"        : Result["Color"     ] = this.Color;      break;
					case "Icon"         : Result["Icon"      ] = this.Icon;       break;
					case "Section"      : Result["Section"   ] = this.Section;    break;
					case "ShortUri"     : Result["ShortUri"  ] = this.ShortUri;   break;
					case "SubSection"   : Result["SubSection"] = this.SubSection; break;
					case "Title"        : Result["Title"     ] = this.Title;      break;
					case "Uri"          : Result["Uri"       ] = this.Uri;        break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case "IsHeadline"   :
						Result["IsHeadline"  ] = this.IsHeadline  .ToString (); break;
					case "PageIndex"    :
						Result["PageIndex"   ] = this.PageIndex   .ToString (); break;
					case "SectionID"    :
						Result["SectionID"   ] = this.SectionID   .ToString (); break;
					case "SubSectionID" :
						Result["SubSectionID"] = this.SubSectionID.ToString (); break;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					case "LastModified" :
						{
						//-------------------------------------------------------------------------------------------------------
						Result["Date"] = this.LastModified.ToString ( "yyyyMMddHHmmss" );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					case "PublishDate"  :
						{
						//-------------------------------------------------------------------------------------------------------
						Result["PublishDate"] = this.PublishDate.ToString ( "yyyyMMddHHmmss" );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					case "UpdateDate" :
						{
						//-------------------------------------------------------------------------------------------------------
						Result["UpdateDate" ] = this.UpdateDate .ToString ( "yyyyMMddHHmmss" );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Result.ToString ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( string Value ) { return new Article ( Value ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans la chaine.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( JToken Value ) { return new Article ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge les infos contenue dans le tableau.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Parse ( IDictionary<string, string> Value )
			 { return new Article ( Value ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		[DataMember]public string   ArticleID    { get; set; }
		[DataMember]public string   Author       { get; set; }
		[DataMember]public string   Color        { get; set; }
		[DataMember]public string   Content      { get; set; }
		[DataMember]public string   Icon         { get; set; }
		[DataMember]public bool     IsHeadline   { get; set; }
		[DataMember]public long     PageIndex    { get; set; }
		[DataMember]public DateTime PublishDate  { get; set; }
		[DataMember]public string   Section      { get; set; }
		[DataMember]public long     SectionID    { get; set; }
		[DataMember]public string   ShortUri     { get; set; }
		[DataMember]public string   SubSection   { get; set; }
		[DataMember]public long     SubSectionID { get; set; }
		[DataMember]public string   Title        { get; set; }
		[DataMember]public DateTime UpdateDate   { get; set; }
		[DataMember]public string   Uri          { get; set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens un la date la plus récente d'édition de l'article.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public DateTime LastModified
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				return ( this.UpdateDate > this.PublishDate ) ? this.UpdateDate : this.PublishDate;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens un objet Article non initialisé.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Article Empty { get { return new Article (); } }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'objet courant est initialisé ou pas.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsEmpty
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				return string.IsNullOrEmpty ( this.ArticleID ) && 
				       string.IsNullOrEmpty ( this.Uri       );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'atticle a été marqué.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsMarked { get; set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'atticle dispose juste d'un lien.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsSingleLink
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				return   string.IsNullOrEmpty ( this.ArticleID ) && ! string.IsNullOrEmpty ( this.Uri );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextRadio.Service"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
