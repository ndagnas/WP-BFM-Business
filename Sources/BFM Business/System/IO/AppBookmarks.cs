//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : AppBookmarks.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet AppBookmarks
// Créé le       : 29/03/2015
// Modifié le    : 21/05/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Xml;
using System.Globalization;
using System.Xml.Serialization;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Security.Cryptography;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.IO"
//*******************************************************************************************************************************
namespace System.IO
	{

	//   ###   ####   ####          ####    ###    ###   #   #  #   #   ###   ####   #   #   ####
	//  #   #  #   #  #   #         #   #  #   #  #   #  #  #   ## ##  #   #  #   #  #  #   #    
	//  #####  ####   ####   #####  ####   #   #  #   #  ###    # # #  #####  ####   ###     ### 
	//  #   #  #      #             #   #  #   #  #   #  #  #   #   #  #   #  #   #  #  #       #
	//  #   #  #      #             ####    ###    ###   #   #  #   #  #   #  #   #  #   #  #### 

	//***************************************************************************************************************************
	// Classe AppBookmarks
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit les procédures nécessaires à la gestion d'un cache web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class AppBookmarks : IDisposable
		{
		//***********************************************************************************************************************
		#region // Classe BookmarksComparer
		//-----------------------------------------------------------------------------------------------------------------------
		class BookmarksComparer : IComparer<KeyValuePair<object, DateTime>>
			{
			//-------------------------------------------------------------------------------------------------------------------
			public int Compare ( KeyValuePair<object, DateTime> X, KeyValuePair<object, DateTime> Y )
				{
				//---------------------------------------------------------------------------------------------------------------
				return ( X.Value > Y.Value ) ? -1 : 1;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Eléments Statiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se connecte au gestionnaire de marque pages.
		/// </summary>
		/// <returns> Objet <b>AppBookmarks</b> permettant la gestion des marques pages.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static AppBookmarks GetForApplication () { return new AppBookmarks (); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se connecte au gestionnaire de marque pages.
		/// </summary>
		/// <param name="Size">Taille de l'objet.</param>
		/// <returns> Objet <b>AppBookmarks</b> permettant la gestion des marques pages.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static AppBookmarks GetForApplication ( int Size )
			{ return new AppBookmarks ( Size ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'objet est marqué.
		/// </summary>
		/// <param name="Name">Nom de l'objet.</param>
		/// <returns><b>True</b> si l'objet est marqué, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool IsMarked ( string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Iso = IsolatedStorageFile.GetUserStoreForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier Bookmarks doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( Iso.DirectoryExists ( "Bookmarks" ) )
						{
						string Pattern = "Bookmarks/{*-" + ToBaseName ( Name ) + "}";

						foreach ( string FileID in Iso.GetFileNames ( Pattern ) )
							{
							return true;
							}
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		//Sectiond es Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private int                 Size = 50;
		private IsolatedStorageFile Iso  = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>AppBookmarks</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private AppBookmarks ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try { this.Iso = IsolatedStorageFile.GetUserStoreForApplication (); } catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>AppBookmarks</b>.
		/// </summary>
		/// <param name="Size">Taille de l'objet.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private AppBookmarks ( int Size )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.Size = Size;

			try { this.Iso = IsolatedStorageFile.GetUserStoreForApplication (); } catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Libère les ressources utilisées et purge le trop plein.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Dispose ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Iso != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier AppCache doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( Iso.DirectoryExists ( "Bookmarks" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						// On liste les fichiers pour éviter la surcharge
						//-------------------------------------------------------------------------------------------------------
						List<string> Files = new List<string> ();
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						foreach ( string fileName in Iso.GetFileNames ( "Bookmarks/*" ) )
							{
							Files.Add ( "AppCache/" + fileName );
							}

						while ( Files.Count > this.Size )
							{
							try { Iso.DeleteFile ( Files [0] ); Files.RemoveAt ( 0 ); } catch {}
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				try { Iso.Dispose (); } catch {}

				Iso = null;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Génère une cla correspondante au nom.
		/// </summary>
		/// <param name="Name">Nom.</param>
		/// <returns>Cla associée.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static string ToBaseName ( string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return new Guid ( Md5Encryptor.GetString ( Name ) ).ToString ( "D" ).ToUpper ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la liste des marques pages.
		/// </summary>
		/// <typeparam name="T">Type de l'objet.</typeparam>
		/// <returns>Tablea contenant les marques pages.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public IDictionary<T, DateTime> GetEnumerator<T> ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			var Buffer = new List<KeyValuePair<object, DateTime>> ();
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Iso != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier Bookmarks doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( Iso.DirectoryExists ( "Bookmarks" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						string Pattern = "Bookmarks/{*}";
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						foreach ( string FileID in Iso.GetFileNames ( Pattern ) )
							{
							//---------------------------------------------------------------------------------------------------
							if ( FileID.Length == 54 )
								{
								//-----------------------------------------------------------------------------------------------
								string FileDate = FileID.Substring ( 1, 15 );
								
								DateTime Date = DateTime.MinValue;
								//-----------------------------------------------------------------------------------------------

								//-----------------------------------------------------------------------------------------------
								if ( DateTime.TryParseExact ( FileDate, "yyyyMMdd-HHmmss", null, DateTimeStyles.None, out Date ) )
									{
									//-------------------------------------------------------------------------------------------
									string FileName = "Bookmarks/" + FileID;

									using ( var File = Iso.OpenFile ( FileName, FileMode.Open ) )
										{
										using ( var Sr = new StreamReader ( File ) )
											{
											XmlSerializer Xs = new XmlSerializer ( typeof ( T ) );
 
											using ( StringReader St = new StringReader ( Sr.ReadToEnd () ) )
												{
												XmlReader writer = XmlReader.Create ( St );

												T Object = (T)Xs.Deserialize ( writer );

												Buffer.Add ( new KeyValuePair<object, DateTime> ( Object, Date ) );
												}
											}
										}
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Dictionary<T, DateTime> Result = new Dictionary<T, DateTime> ();

			Buffer.Sort ( new BookmarksComparer () );

			foreach ( var Item in Buffer ) { Result[(T)Item.Key] = Item.Value; }

			return Result;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Crée un nouveau marque page.
		/// </summary>
		/// <param name="Name">Nom du marque page.</param>
		/// <param name="Value">Marque page.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Add<T> ( string Name, T Value )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Iso != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier Bookmarks doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Iso.DirectoryExists ( "Bookmarks" ) )
						Iso.CreateDirectory ( "Bookmarks" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Convertion du nom en clé
					//-----------------------------------------------------------------------------------------------------------
					string Pattern = "Bookmarks/{*-" + ToBaseName ( Name ) + "}";
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Suppression du fichier
					//-----------------------------------------------------------------------------------------------------------
					foreach ( string FileID in Iso.GetFileNames ( Pattern ) )
						{
						//-------------------------------------------------------------------------------------------------------
						Iso.DeleteFile ( "Bookmarks/" + FileID );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Enregistrement des Informations
					//-----------------------------------------------------------------------------------------------------------
					string BaseName = ToBaseName ( Name );

					string BookmarkFile = string.Format ( "Bookmarks/{{{0}-{1}}}", DateTime.Now.
					                                    ToString ( "yyyyMMdd-HHmmss" ), BaseName );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Ecriture du fichier
					//-----------------------------------------------------------------------------------------------------------
					using ( var File = Iso.CreateFile ( BookmarkFile ) )
						{
						//-------------------------------------------------------------------------------------------------------
						using ( var Sw = new StreamWriter ( File ) )
							{
							//---------------------------------------------------------------------------------------------------
							XmlSerializer Xs = new XmlSerializer ( typeof ( T ) );
 
							using ( StringWriter St = new StringWriter () )
								{
								XmlWriter writer = XmlWriter.Create ( St );

								Xs.Serialize ( writer, Value );

								Sw.Write ( St.ToString () );
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le marque page.
		/// </summary>
		/// <param name="Name">Nom du marque page.</param>
		/// <returns>Marque page.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public T Get<T> ( string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Iso != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier Bookmarks doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( Iso.DirectoryExists ( "Bookmarks" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						string Pattern = "Bookmarks/{*-" + ToBaseName ( Name ) + "}";
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						foreach ( string FileID in Iso.GetFileNames ( Pattern ) )
							{
							//---------------------------------------------------------------------------------------------------
							if ( FileID.Length == 54 )
								{
								//-----------------------------------------------------------------------------------------------
								string FileDate = FileID.Substring ( 1, 15 );
								
								DateTime Date = DateTime.MinValue;
								//-----------------------------------------------------------------------------------------------

								//-----------------------------------------------------------------------------------------------
								if ( DateTime.TryParseExact ( FileDate, "yyyyMMdd-HHmmss", null, DateTimeStyles.None, out Date ) )
									{
									//-------------------------------------------------------------------------------------------
									string FileName = "Bookmarks/" + FileID;

									using ( var File = Iso.OpenFile ( FileName, FileMode.Open ) )
										{
										using ( var Sr = new StreamReader ( File ) )
											{
											XmlSerializer Xs = new XmlSerializer ( typeof ( T ) );
 
											using ( StringReader St = new StringReader ( Sr.ReadToEnd () ) )
												{
												XmlReader writer = XmlReader.Create ( St );

												return (T)Xs.Deserialize ( writer );
												}
											}
										}
									//-------------------------------------------------------------------------------------------
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return default(T);
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Supprime un marque page.
		/// </summary>
		/// <param name="Name">Nom du marque page.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Remove ( string Name )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Iso != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier Bookmarks doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Iso.DirectoryExists ( "Bookmarks" ) ) return;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Convertion du nom en clé
					//-----------------------------------------------------------------------------------------------------------
					string Pattern = "Bookmarks/{*-" + ToBaseName ( Name ) + "}";
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Suppression du fichier
					//-----------------------------------------------------------------------------------------------------------
					foreach ( string FileID in Iso.GetFileNames ( Pattern ) )
						{
						//-------------------------------------------------------------------------------------------------------
						Iso.DeleteFile ( "Bookmarks/" + FileID );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.IO"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
