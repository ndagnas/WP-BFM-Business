//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : AppWebCache.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet AppWebCache
// Créé le       : 28/02/2015
// Modifié le    : 24/07/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Globalization;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Net.NetworkInformation;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.IO"
//*******************************************************************************************************************************
namespace System.IO
	{

	//   ###   ####   ####           ###    ###    ###   #   #  #####
	//  #   #  #   #  #   #         #   #  #   #  #   #  #   #  #    
	//  #####  ####   ####   #####  #      #####  #      #####  ###  
	//  #   #  #      #             #   #  #   #  #   #  #   #  #    
	//  #   #  #      #              ###   #   #   ###   #   #  #####

	//***************************************************************************************************************************
	// Classe AppWebCache
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit les procédures nécessaires à la gestion d'un cache web.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class AppWebCache : IDisposable
		{
		//***********************************************************************************************************************
		#region // Section des Eléments Statiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>AppWebCache</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static AppWebCache () { AppWebCache.Size = 100; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Supprime tous les fichiers de cache web.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void Clear ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				using ( var Iso = IsolatedStorageFile.GetUserStoreForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Iso.DirectoryExists ( "AppCache" ) ) return;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Parcours et suppression de tous les dossiers
					//-----------------------------------------------------------------------------------------------------------
					string[] Files = Iso.GetFileNames ( "AppCache/" );
					
					foreach ( string FileName in Files )
						{
						//-------------------------------------------------------------------------------------------------------
						Iso.DeleteFile ( "AppCache/" + FileName );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se connecte au cache pour une procédure de sauvegarde.
		/// </summary>
		/// <returns> Objet <b>AppWebCache</b> permettant la gestion du cache.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static AppWebCache GetForApplication () { return new AppWebCache (); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge dans le cache des données exploitables.
		/// </summary>
		/// <param name="FileName">Nom de base du fichier.</param>
		/// <param name="Entry">Objet <b>AppCacheFile</b>.</param>
		/// <returns><b>True</b> si du cahce a été trouvé, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool Find ( string FileName, out AppCacheFile Entry )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return Find ( FileName, DateTime.MinValue, out Entry );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Charge dans le cache des données exploitables.
		/// </summary>
		/// <param name="FileName">Nom de base du fichier.</param>
		/// <param name="ExpireDate">Date d'expiration.</param>
		/// <param name="Entry">Objet <b>AppCacheFile</b>.</param>
		/// <returns><b>True</b> si du cahce a été trouvé, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool Find ( string FileName, DateTime ExpireDate, out AppCacheFile Entry )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Entry = AppCacheFile.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! NetworkInterface.GetIsNetworkAvailable () )
					ExpireDate = DateTime.MinValue;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				using ( var Iso = IsolatedStorageFile.GetUserStoreForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( Iso.DirectoryExists ( "AppCache" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						// On recherche dans le Cache
						//-------------------------------------------------------------------------------------------------------
						foreach ( string FileID in Iso.GetFileNames ( "AppCache/*-" + FileName ) )
							{
							//---------------------------------------------------------------------------------------------------
							// A t'on le bon format de fichier ?
							//---------------------------------------------------------------------------------------------------
							if ( FileID.Length > 14 )
								{
								//-----------------------------------------------------------------------------------------------
								string FileDate = FileID.Substring ( 0, 14 );
								//-----------------------------------------------------------------------------------------------

								//-----------------------------------------------------------------------------------------------
								// On contrôle la validité des données
								//-----------------------------------------------------------------------------------------------
								DateTime Date = DateTime.MinValue;

								DateTime.TryParseExact ( FileDate, "yyyyMMddHHmmss", null, 
								                                   DateTimeStyles.None, out Date );

								TimeSpan FileValidity = DateTime.Now.Subtract ( Date );
								//-----------------------------------------------------------------------------------------------

								//-----------------------------------------------------------------------------------------------
								string CacheFile = "AppCache/" + FileID;

								using ( var File = Iso.OpenFile ( CacheFile, FileMode.Open ) )
									{
									using ( var Sr = new StreamReader ( File ) )
										{
										Entry = new AppCacheFile ()
											{
											Name    = "AppCache/" + FileID,
											Date    = Date                ,
											Content = Sr.ReadToEnd ()     ,
											};

										return ( ! Entry.IsEmpty ) && ( Date >= ExpireDate );
										}
									}
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		//Sectiond es Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private IsolatedStorageFile Iso = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Eléments Publiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>AppWebCache</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private AppWebCache ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try { this.Iso = IsolatedStorageFile.GetUserStoreForApplication (); } catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Libère les ressources utilisées et purge le trop plein.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Dispose ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Iso != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier AppCache doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Iso.DirectoryExists ( "AppCache" ) ) Iso.CreateDirectory ( "AppCache" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// On liste les fichiers pour éviter la surcharge
					//-----------------------------------------------------------------------------------------------------------
					List<string> Files = new List<string> ();

					foreach ( string fileName in Iso.GetFileNames ( "AppCache/*" ) )
						{
						Files.Add ( "AppCache/" + fileName );
						}

					while ( Files.Count > Size )
						{
						try { Iso.DeleteFile ( Files [0] ); Files.RemoveAt ( 0 ); } catch {}
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				try { Iso.Dispose (); } catch {}

				Iso = null;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Sauvegarde le fichier dans le cache.
		/// </summary>
		/// <param name="FileDate">Nom du fichier.</param>
		/// <param name="Content">Contenue du fichier./param>
		//-----------------------------------------------------------------------------------------------------------------------
		public AppCacheFile Save ( string FileName, string Content )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return this.Save ( FileName, DateTime.Now, Content );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Sauvegarde le fichier dans le cache.
		/// </summary>
		/// <param name="FileDate">Nom du fichier.</param>
		/// <param name="FileDate">Date du fichier.</param>
		/// <param name="Content">Contenue du fichier./param>
		//-----------------------------------------------------------------------------------------------------------------------
		public AppCacheFile Save ( string FileName, DateTime FileDate, string Content )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string CacheFile = string.Format ( "AppCache/{0}-{1}", FileDate.ToString ( "yyyyMMddHHmmss" ), FileName );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Iso != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Le dossier AppCache doit exister
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Iso.DirectoryExists ( "AppCache" ) ) Iso.CreateDirectory ( "AppCache" );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Quoi qu'on fasse, si un fichier existe, on le supprime
					//-----------------------------------------------------------------------------------------------------------
					foreach ( string FileID in Iso.GetFileNames ( "AppCache/*-" + FileName ) )
						{
						//-------------------------------------------------------------------------------------------------------
						Iso.DeleteFile ( "AppCache/" + FileID );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// On enregistre les nouvelles données
					//-----------------------------------------------------------------------------------------------------------
					using ( var File = Iso.CreateFile ( CacheFile ) )
						{
						//-------------------------------------------------------------------------------------------------------
						using ( var Sw = new StreamWriter ( File ) )
							{
							Sw.Write ( Content );

							return new AppCacheFile () { Content = Content   , 
							                             Date    = FileDate  ,
							                             Name    = CacheFile };
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return new AppCacheFile () { Content = Content, Date = FileDate, Name = CacheFile };
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit la taille du cache en nombre de fichiers.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static int Size { get; set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.IO"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
