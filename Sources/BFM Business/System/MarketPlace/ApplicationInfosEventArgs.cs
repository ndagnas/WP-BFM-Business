//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : ApplicationInfosEventArgs.cs
// Auteur        : Nicolas Dagnas
// Description   : Déclaration de l'objet ApplicationInfosEventArgs
// Créé le       : 09/02/2015
// Modifié le    : 20/05/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Xml.Linq;
using System.Windows.Media;
using System.Globalization;
using System.Windows.Controls;
using System.Windows.Phone.Infos;
using System.Windows.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.MarketPlace"
//*******************************************************************************************************************************
namespace System.MarketPlace
	{

	//   ###   ####   ####          #  #   #  #####   ###    ####
	//  #   #  #   #  #   #         #  ##  #  #      #   #  #    
	//  #####  ####   ####   #####  #  # # #  ###    #   #   ### 
	//  #   #  #      #             #  #  ##  #      #   #      #
	//  #   #  #      #             #  #   #  #       ###   #### 

	//***************************************************************************************************************************
	// Classe ApplicationInfosEventArgs
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Contiens les informations d'une application pour une région donnée.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class ApplicationInfosEventArgs : EventArgs
		{
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>ApplicationInfosEventArgs</b>.
		/// </summary>
		/// <param name="AppGuid">Identifiant de l'application.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		internal ApplicationInfosEventArgs ( Guid Guid ) { this.Guid = Guid; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>ApplicationInfosEventArgs</b>.
		/// </summary>
		/// <param name="StoreContent">Contenue du Store.</param>
		/// <param name="CultureInfo">Culture de la région associée.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		internal ApplicationInfosEventArgs ( XElement StoreContent, CultureInfo CultureInfo )
			{
			//-------------------------------------------------------------------------------------------------------------------
			#region // Implémentation de la Procédure
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			XNamespace ns = "http://schemas.zune.net/catalog/apps/2008/02";
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				// AverageUserRating
				//---------------------------------------------------------------------------------------------------------------
				var XAverageUserRating = StoreContent.Element ( ns + "averageUserRating" );

				if ( XAverageUserRating != null )
					this.AverageUserRating = XAverageUserRating.Value.ToFloat () / 2;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Description
				//---------------------------------------------------------------------------------------------------------------
				var XDescription = StoreContent.Element ( ns + "content" );

				if ( XDescription != null ) this.Description = XDescription.Value;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Guid
				//---------------------------------------------------------------------------------------------------------------
				var XGuid = StoreContent.Element ( ns + "id" );

				if ( XGuid != null )
					this.Guid = new Guid ( XGuid.Value.Replace ( "urn:uuid:", "" ) );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Publisher
				//---------------------------------------------------------------------------------------------------------------
				var XPublisher = StoreContent.Element ( ns + "publisher" );

				if ( XPublisher != null ) this.Publisher = XPublisher.Value;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// FirstPublished
				//---------------------------------------------------------------------------------------------------------------
				var XFirstPublished = StoreContent.Element ( ns + "releaseDate" );

				if ( XFirstPublished != null )
					{
					DateTime FirstPublished = DateTime.MinValue;
				
					DateTime.TryParse ( XFirstPublished.Value, out FirstPublished );

					this.FirstPublished = FirstPublished;
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// IsPublished
				//---------------------------------------------------------------------------------------------------------------
				var XIsPublished = StoreContent.Element ( ns + "visibilityStatus" );

				if ( XIsPublished != null )
					this.IsPublished = ! XIsPublished.Value.EqualsIgnoreCase ( "Unpublished" );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Title
				//---------------------------------------------------------------------------------------------------------------
				var XTitle = StoreContent.Element ( ns + "title" );

				if ( XTitle != null ) this.Title = XTitle.Value;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// UserRatingCount
				//---------------------------------------------------------------------------------------------------------------
				var XUserRatingCount = StoreContent.Element ( ns + "userRatingCount" );

				if ( XUserRatingCount != null )
					this.UserRatingCount = XUserRatingCount.Value.ToInteger ();
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				var XEntry = StoreContent.Element ( ns + "entry" );

				if ( XEntry != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					// LastPublished
					//-----------------------------------------------------------------------------------------------------------
					var XLastPublished = XEntry.Element ( ns + "skuLastUpdated" );

					if ( XLastPublished != null )
						{
						DateTime LastPublished = DateTime.MinValue;
				
						DateTime.TryParse ( XLastPublished.Value, out LastPublished );

						this.LastPublished = LastPublished;
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Conditions ...
					//-----------------------------------------------------------------------------------------------------------
					var XIsAvailableInCountry   = XEntry.Element ( ns + "isAvailableInCountry"   );
					var XIsAvailableInStore     = XEntry.Element ( ns + "isAvailableInStore"     );
					var XIsBlacklisted          = XEntry.Element ( ns + "isBlacklisted"          );
					var XIsClientTypeCompatible = XEntry.Element ( ns + "isClientTypeCompatible" );
					var XIsHardwareCompatible   = XEntry.Element ( ns + "isHardwareCompatible"   );

					if ( XIsAvailableInCountry   != null )
						this.IsAvailableInCountry   = XIsAvailableInCountry  .Value.IsTrue ();
					if ( XIsAvailableInStore     != null )
						this.IsAvailableInStore     = XIsAvailableInStore    .Value.IsTrue ();
					if ( XIsBlacklisted          != null )
						this.IsBlacklisted          = XIsBlacklisted         .Value.IsTrue ();
					if ( XIsClientTypeCompatible != null )
						this.IsClientTypeCompatible = XIsClientTypeCompatible.Value.IsTrue ();
					if ( XIsHardwareCompatible   != null )
						this.IsHardwareCompatible   = XIsHardwareCompatible  .Value.IsTrue ();
					//-----------------------------------------------------------------------------------------------------------
				
					//-----------------------------------------------------------------------------------------------------------
					// Version
					//-----------------------------------------------------------------------------------------------------------
					var XVersion = XEntry.Element ( ns + "version" );

					if ( XVersion != null ) this.Version = Version.Parse ( XVersion.Value );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void SuggestUpdateIfNewer ( Version Current )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if (   this.IsEmpty              ) return;
			if ( ! this.IsAvailableInCountry ) return;
			if ( ! this.IsAvailableInStore   ) return;
			if (   this.IsBlacklisted        ) return;
			if ( ! this.IsPublished          ) return;
			if (   this.Version <= Current   ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string ContentText     = "Une mise à jour est disponible pour cette application" +
							         " sur le Windows Store."                                +
							         "\n\n"                                                  +
							         "Vous pouvez la récupérer dès maintenant :)";
			string LeftButtonText  = "j'y vais";
			string RightButtonText = "plus tard";
			string VersionText     = "Notes de version :";
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( DeviceInfos.ApplicationCulture.TwoLetterISOLanguageName.EqualsIgnoreCase ("en") )
				{
				//---------------------------------------------------------------------------------------------------------------
				ContentText     = "An update is available for this application on the" +
				                  " Windows Store."                                    +
								  "\n\n"                                               +
								  "You can get it now :)";
				LeftButtonText  = "I go";
				RightButtonText = "later";
				VersionText     = "Release notes:";
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			object VersionDetails = null;
			int    IndexVersion   = this.Description.IndexOf ( "Version " );

			if ( IndexVersion != -1 )
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					string VersionDescription = this.Description.Substring ( IndexVersion );

					Brush      Foreground = (Brush     )Application.Current.Resources["PhoneForegroundBrush"    ];
					FontFamily FontFamily = (FontFamily)Application.Current.Resources["PhoneFontFamilySemiLight"];

					double     FontSize   = ( DeviceInfos.DeviceType == DeviceType.Phablet ) ? 18.667 : 22.667;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					var Outer = new Grid () { Margin = new Thickness ( 0, 8, 0, -12 ) };
			
					Outer.RowDefinitions.Add ( new RowDefinition () { Height = GridLength.Auto        } );
					Outer.RowDefinitions.Add ( new RowDefinition () { Height = new GridLength ( 180 ) } );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					var TitleContent = new TextBlock () { Text       = VersionText, 
					                                      Foreground = Foreground , 
														  FontFamily = FontFamily , 
														  FontSize   = FontSize   };
					Outer.Children.Add ( TitleContent );

					TitleContent.SetValue ( Grid.RowProperty, 0 );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					var Inner = new Grid () { Margin = new Thickness ( 0, 12, 0, 0 ) };

					Inner.Children.Add ( new Border () { Opacity    = 0.1        , 
					                                     Background = Foreground } );

					Inner.Children.Add ( new ScrollViewer ()
							{
							Content = new TextBlock ()
								{
								Text         = VersionDescription          , 
								TextWrapping = TextWrapping.Wrap           , 
								Foreground   = Foreground                  , 
								Padding      = new Thickness ( 6, 4, 6, 4 ), 
								FontFamily   = FontFamily                  , 
								FontSize     = FontSize                    ,
								},
							} );

					Outer.Children.Add ( Inner );

					Inner.SetValue ( Grid.RowProperty, 1 );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					VersionDetails = Outer;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			CustomMessageBox MessageBox = new CustomMessageBox ()
				{
				Caption            = string.Format ( "{0} [{1}]", this.Title, this.Version ),
				Message            = ContentText                                            ,
				Content            = VersionDetails                                         ,
				LeftButtonContent  = LeftButtonText                                         ,
				RightButtonContent = RightButtonText                                        ,
				};
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			MessageBox.Dismissed += (S, A) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( A.Result == CustomMessageBoxResult.LeftButton )
					{
					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						(new MarketplaceDetailTask () { 
							ContentIdentifier = this.Guid.ToString (), 
							ContentType       = MarketplaceContentType.Applications }).Show ();
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch {}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				};
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			MessageBox.Show ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Retourne une chaine qui représente l'Object actif.
		/// </summary>
		/// <returns>Chaine qui représente l'Object actif.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public override string ToString () { return string.Format ( "{{{0}}}", this.Guid ); }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la moyenne des évaluations de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public double AverageUserRating { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la culture déterminant le store dont les informations de l'application ont 
		/// été récupérées.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public CultureInfo CultureInfo { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la description de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Description { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la date de première publication de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public DateTime FirstPublished { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'identifiant de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Guid Guid { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application est disponible pour cette zone géographique.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsAvailableInCountry { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application est disponible pour ce magasin.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsAvailableInStore { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application a été black-listée.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsBlacklisted { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application est compatible avec le système.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsClientTypeCompatible { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si la structure actuelle n'a pas pu être alimentée.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsEmpty { get { return ( this.Version == null ); } }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application est compatible avec l'appareil.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsHardwareCompatible { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si l'application est publiée.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsPublished { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la date de dernière mise à jour de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public DateTime LastPublished { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens l'auteur de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Publisher { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le titre de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Title { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens le nombre d'évaluations de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public int UserRatingCount { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la version courante de l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Version Version { get; private set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.MarketPlace"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
