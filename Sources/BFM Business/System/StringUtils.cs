//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : StringUtils.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet StringUtils
// Créé le       : 15/01/2015
// Modifié le    : 05/05/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Text;
using System.Globalization;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System"
//*******************************************************************************************************************************
namespace System
	{

	//   ####  #####  ####   #  #   #   ###           #   #  #####  #  #       ####
	//  #        #    #   #  #  ##  #  #   #          #   #    #    #  #      #    
	//   ###     #    ####   #  # # #  #       #####  #   #    #    #  #       ### 
	//      #    #    #   #  #  #  ##  #   ##         #   #    #    #  #          #
	//  ####     #    #   #  #  #   #   ### #          ###     #    #  #####  #### 

	//***************************************************************************************************************************
	// Classe StringUtils
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit des méthodes utilisées pour manipuler les chaines.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class StringUtils
		{
		//***********************************************************************************************************************
		/// <summary>
		/// Compare les 2 chaines de caractères sont tenir compte de la casse.
		/// </summary>
		/// <param name="Self">Première chaine de caractères à comparer.</param>
		/// <param name="Str">Seconde chaine de caractères à comparer.</param>
		/// <returns><b>True</b> si les 2 chaines sont égales, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool EqualsIgnoreCase ( this string Self, string Str )
			{
			//-------------------------------------------------------------------------------------------------------------------
			return (string.Compare (Self, Str, StringComparison.InvariantCultureIgnoreCase) == 0);
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si le contenue de la chaine peut être un booléen valant <b>False</b>.
		/// </summary>
		/// <param name="Self">
		/// Chaîne de caractères initiale à compléter ou à tronquer. Cette chaîne de caractères 
		/// n'est pas modifiée.
		/// </param>
		/// <returns><b>True</b> si false, no, 0, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool IsFalse ( this string Self )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ("non"  ).EqualsIgnoreCase ( Self ) ) return true;
			if ( ("false").EqualsIgnoreCase ( Self ) ) return true;
			if ( ("no"   ).EqualsIgnoreCase ( Self ) ) return true;
			if ( ("0"    ).EqualsIgnoreCase ( Self ) ) return true;

			return ! IsTrue ( Self );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique si le contenue de la chaine peut être un booléen valant <b>True</b>.
		/// </summary>
		/// <param name="Self">
		/// Chaîne de caractères initiale à compléter ou à tronquer. Cette chaîne de caractères 
		/// n'est pas modifiée.
		/// </param>
		/// <returns><b>True</b> si true, yes, 1, sinon <b>False</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool IsTrue ( this string Self )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ("oui" ).EqualsIgnoreCase ( Self ) ) return true;
			if ( ("true").EqualsIgnoreCase ( Self ) ) return true;
			if ( ("yes" ).EqualsIgnoreCase ( Self ) ) return true;
			if ( ("1"   ).EqualsIgnoreCase ( Self ) ) return true;

			return ! IsFalse ( Self );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaine en Flotant.
		/// </summary>
		/// <param name="Self">Chaine représentant un Entier à convertir.</param>
		/// <returns>Chaine convertie.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static double ToFloat ( this string Self ) { return Self.ToFloat ( 0 ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaine en Flotant.
		/// </summary>
		/// <param name="Self">Chaine représentant un Entier à convertir.</param>
		/// <param name="Default">
		/// Valeur par défaut à renvoyer si la chaine n'est pas convertible.
		/// </param>
		/// <returns>Chaine convertie.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static double ToFloat ( this string Self, double Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			CultureInfo Ci = CultureInfo.CurrentCulture;

			string Value = Self.Replace ( " ", "" );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Value = Value.Replace ( " ", "");
			Value = Value.Replace ( ".", Ci.NumberFormat.NumberDecimalSeparator );
			Value = Value.Replace ( ",", Ci.NumberFormat.NumberDecimalSeparator );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try { return double.Parse ( Value ); } catch {}

			return Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaine en Entier.
		/// </summary>
		/// <param name="Self">Chaine représentant un Entier à convertir.</param>
		/// <returns>Chaine convertie.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static int ToInteger ( this string Self ) { return Self.ToInteger ( 0 ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaine en Entier.
		/// </summary>
		/// <param name="Self">Chaine représentant un Entier à convertir.</param>
		/// <param name="Default">
		/// Valeur par défaut à renvoyer si la chaine n'est pas convertible.
		/// </param>
		/// <returns>Chaine convertie.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static int ToInteger ( this string Self, int Default )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string Value = Self.Replace ( " ", "" );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			int vPos = Value.IndexOf ( '.' );
			int pPos = Value.IndexOf ( ',' );
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				if (vPos >= 0) return (int)Int64.Parse ( Value.Substring (0, vPos) );
				if (pPos >= 0) return (int)Int64.Parse ( Value.Substring (0, pPos) );

				return (int)Int64.Parse ( Value );
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Default;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaîne spécifiée en initiales majuscules.
		/// </summary>
		/// <param name="Self">Chaine à traiter.</param>
		/// <returns>Chaîne spécifiée convertie en initiales majuscules.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static string ToTitleCase ( this string Self )
			{
			//-------------------------------------------------------------------------------------------------------------------
			bool          ToUpper = false;
			StringBuilder Result  = new StringBuilder ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			for ( int Index = 0 ; Index < Self.Length ; Index ++ )
				{
				//---------------------------------------------------------------------------------------------------------------
				char Code = Self[Index];
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				if ( Index == 0 )
					{
					//-----------------------------------------------------------------------------------------------------------
					ToUpper = (Code<48 || (Code>=58 && Code<=64) || (Code>=91 && Code<=96));
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! ToUpper )
						Result.Append ( Self.Substring ( Index, 1 ).ToUpper () );
					//-----------------------------------------------------------------------------------------------------------
					else
						Result.Append ( Self.Substring ( Index, 1 ).ToLower () );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( ToUpper )
					{
					//-----------------------------------------------------------------------------------------------------------
					Result.Append ( Self.Substring ( Index, 1 ).ToUpper () );

					ToUpper = false;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					ToUpper = (Code<48 || (Code>=58 && Code<=64) || (Code>=91 && Code<=96));

					Result.Append ( Self.Substring ( Index, 1 ).ToLower () );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Result.ToString ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit la chaine en Uri.
		/// </summary>
		/// <param name="Self">Chaine représentant une Uri à convertir.</param>
		/// <returns>Chaine convertie.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static Uri ToUri ( this string Self )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( Self ) )
					return new Uri ( Self, UriKind.Absolute );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return null;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
