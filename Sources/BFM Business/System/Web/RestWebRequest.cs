//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : RestWebRequest.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet permettant de récupérer le contenue distant
// Créé le       : 15/01/2015
// Modifié le    : 28/01/2016
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.ComponentModel;
using System.IO.Compression;
using System.Windows.Threading;
using System.Collections.Generic;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using SharpCompress.Compressor;
using SharpCompress.Compressor.Deflate;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Web"
//*******************************************************************************************************************************
namespace System.Web
	{

	//  ####   #####   ####  #####         ####   #####   ###    #   #  #####   ####  #####
	//  #   #  #      #        #           #   #  #      #   #   #   #  #      #        #  
	//  ####   ###     ###     #    #####  ####   ###    #   #   #   #  ###     ###     #  
	//  #   #  #          #    #           #   #  #      #   #   #   #  #          #    #  
	//  #   #  #####  ####     #           #   #  #####   ### #   ###   #####  ####     #  

	//***************************************************************************************************************************
	// Classe RestWebRequest
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet d'échanger des commandes simples avec le site distant.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	sealed class RestWebRequest
		{
		//***********************************************************************************************************************
		#region // Classe AsyncRequestState
		//-----------------------------------------------------------------------------------------------------------------------
		private class AsyncRequestState
			{
			//-------------------------------------------------------------------------------------------------------------------
			int                      TimeOut = 30;
			private ManualResetEvent AllDone = new ManualResetEvent ( false );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			public Uri                        BaseAddress;
			public bool                       Cancelled;
			public AsyncCompletedEventHandler OnComplete;
			public int                        RedirectionsCount;
			public HttpWebRequest             Request;
			public object                     UserToken;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>AsyncRequestState</b>.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public AsyncRequestState ( Uri                        BaseAddress,
			                           HttpWebRequest             Request    , 
									   int                        TimeOut    ,
			                           object                     UserToken  , 
									   AsyncCompletedEventHandler OnComplete )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AllDone           = new ManualResetEvent ( false );
				this.BaseAddress       = BaseAddress;
				this.Cancelled         = false;
				this.OnComplete        = OnComplete;
				this.RedirectionsCount = 0;
				this.Request           = Request;
				this.TimeOut           = TimeOut;
				this.UserToken         = UserToken;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.AllDone.Reset ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Initialise une nouvelle instance de l'objet <b>AsyncUploadString</b>.
			/// </summary>
			/// <param name="Request">Objet <b>Request</b>.</param>
			/// <param name="AsyncState">Données associées à la précédente requête.</param>
			//-------------------------------------------------------------------------------------------------------------------
			public AsyncRequestState ( HttpWebRequest Request, AsyncRequestState AsyncState )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AllDone           = new ManualResetEvent ( false );
				this.BaseAddress       = AsyncState.BaseAddress;
				this.Cancelled         = false;
				this.OnComplete        = AsyncState.OnComplete;
				this.RedirectionsCount = AsyncState.RedirectionsCount + 1;
				this.Request           = Request;
				this.TimeOut           = AsyncState.TimeOut;
				this.UserToken         = AsyncState.UserToken;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.AllDone.Reset ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Valide l'attente.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public void Set () { this.AllDone.Set (); }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Lance une attente.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public bool Wait () { return this.AllDone.WaitOne ( this.TimeOut * 1000 ); }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private static Dictionary<string, string> MimeTypes      = null;
		private        AsyncRequestState          AsyncOperation = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		static RestWebRequest ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest.UserAgent = "Rest-Web-Request-Host/1.0";
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			RestWebRequest.MimeTypes = new Dictionary<string, string> ();

			RestWebRequest.MimeTypes[".png" ] = "image/png";
			RestWebRequest.MimeTypes[".jpe" ] = "image/jpeg";
			RestWebRequest.MimeTypes[".jpeg"] = "image/jpeg";
			RestWebRequest.MimeTypes[".jpg" ] = "image/jpeg";
			RestWebRequest.MimeTypes[".gif" ] = "image/gif";
			RestWebRequest.MimeTypes[".bmp" ] = "image/bmp";
			RestWebRequest.MimeTypes[".ico" ] = "image/vnd.microsoft.icon";
			RestWebRequest.MimeTypes[".tiff"] = "image/tiff";
			RestWebRequest.MimeTypes[".tif" ] = "image/tiff";
			RestWebRequest.MimeTypes[".svg" ] = "image/svg+xml";
			RestWebRequest.MimeTypes[".svgz"] = "image/svg+xml";
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>RestWebRequest</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private RestWebRequest ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.Cookies     = new NameValueCollection  ();
			this.Encoding    = Encoding.UTF8;
			this.Files       = new UploadFileCollection ();
			this.Headers     = new NameValueCollection  ();
			this.QueryString = new NameValueCollection  ();

			this.TimeOut        = 30;
			this.UseCompression = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion de l'Encodage
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Indique ... je sais pas quoi :(
		/// </summary>
		/// <param name="Ch"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static bool IsSafe ( char Ch )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Ch >= 'a' && Ch <= 'z' ) return true;
			if ( Ch >= 'A' && Ch <= 'Z' ) return true;
			if ( Ch >= '0' && Ch <= '9' ) return true;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			switch ( Ch )
				{
				case '\'':
				case '(' :
				case ')' :
				case '*' :
				case '-' :
				case '.' :
				case '_' :
				case '!' : return true;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Convertit ... je m'en fout !!!
		/// </summary>
		/// <param name="n"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static char IntToHex ( int Ch )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Ch <= 9 ) return (char) ( Ch + 0x30 );

			return (char) ( ( Ch - 10 ) + 0x61 );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Encode la chaine
		/// </summary>
		/// <param name="Value"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private string UrlEncode ( string Value )
			{
			//-------------------------------------------------------------------------------------------------------------------
			byte[] Buffer = UrlEncode ( Value, this.Encoding );
			
			return this.Encoding.GetString ( Buffer, 0, Buffer.Length );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Encode la chaine
		/// </summary>
		/// <param name="Value"></param>
		/// <param name="Encoding"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private byte[] UrlEncode ( string Value, Encoding Encoding )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Value == null ) return null;

			byte[] Bytes = Encoding.GetBytes ( Value );
			int    Num1  = 0;
			int    Num2  = 0;
			int    Count = Bytes.Length;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			for ( int Index = 0 ; Index < Count ; Index ++ )
				{
				char Ch = (char) Bytes[Index];

				if      ( Ch == ' '       ) Num1 ++;
				else if ( ! IsSafe ( Ch ) ) Num2 ++;
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( Num1 == 0 && Num2 == 0 ) return Bytes;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			int    Num3   = 0;
			byte[] Buffer = new byte[Count + (Num2 * 2)];

			for ( int Index = 0 ; Index < Count; Index ++ )
				{
				byte Ch1 = Bytes[Index];
				char Ch2 = (char) Ch1;

				if ( IsSafe ( Ch2 ) )
					{
					Buffer[Num3++] = Ch1;
					}
				else if ( Ch2 == ' ' )
					{
					Buffer[Num3++] = 0x2b;
					}
				else
					{
					Buffer[Num3++] = 0x25;
					Buffer[Num3++] = (byte) IntToHex ( ( Ch1 >> 4 ) & 15 );
					Buffer[Num3++] = (byte) IntToHex (   Ch1        & 15);
					}
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Buffer;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Génère un objet <b>HttpWebRequest</b> nécessaire à la requête.
		/// </summary>
		/// <param name="Datas">Données associées.</param>
		/// <returns>Objet <b>HttpWebRequest</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private HttpWebRequest CreateRequest ( Uri Address, bool IsRedirection )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string ContentType = string.Empty;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ! IsRedirection && ( this.QueryString.Count > 0 || this.Files.Count > 0 ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Files.Count > 0 )
					ContentType = "multipart/form-data; boundary=---------------------------" + 
				                                               DateTime.Now.Ticks.ToString ( "x" );
				//---------------------------------------------------------------------------------------------------------------
				else
					ContentType = "application/x-www-form-urlencoded";
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			HttpWebRequest Request = (HttpWebRequest)WebRequest.Create ( Address );

			Request.ContentType       = ContentType;
			Request.UserAgent         = RestWebRequest.UserAgent;
			Request.Method            = ( ContentType.Length == 0 ) ? "GET" : "POST";
			Request.AllowAutoRedirect = false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Request.Headers["Accept-Charset"] = "ISO-8859-1";

			if ( this.UseCompression ) Request.Headers["Accept-Encoding"] = "gzip, deflate";
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Application des Cookies
			//-------------------------------------------------------------------------------------------------------------------
			string Cookie = "";

			foreach ( var A in this.Cookies )
				{
				Cookie += ( string.IsNullOrEmpty ( Cookie ) ? "" : "; " ) + 
				                    string.Format ( "{0}={1}", A.Key, this.UrlEncode ( A.Value ) );
				}

			if ( ! string.IsNullOrEmpty ( Cookie ) ) Request.Headers["Cookie"] = Cookie;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Application des Entêtes
			//-------------------------------------------------------------------------------------------------------------------
			foreach ( var A in this.Headers )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( A.Key.Equals ( "User-Agent" ) )
					Request.UserAgent = A.Value;
				else
					Request.Headers[A.Key] = A.Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Request;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Traitements
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure de données.
		/// </summary>
		/// <param name="AsyncState">Données de la demande.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Async ( AsyncRequestState AsyncState )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.AsyncOperation = AsyncState;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( string.IsNullOrEmpty ( AsyncState.Request.ContentType ) )
					AsyncState.Request.BeginGetResponse      ( AsyncResponseCallback, AsyncState );
				else
					AsyncState.Request.BeginGetRequestStream ( AsyncRequestCallback , AsyncState );
				
				if ( ! AsyncState.Wait () ) this.Cancel ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( WebException Err )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncComplete ( AsyncState, Err, Err.Response );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( Exception Err ) { this.AsyncComplete ( AsyncState, Err, null ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Valide la préparation de la demande.
		/// </summary>
		/// <param name="Async">Résultat de l'opération asynchrone.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void AsyncRequestCallback ( IAsyncResult Async )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AsyncRequestState AsyncState = Async.AsyncState as AsyncRequestState;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Files.Count > 0 )
					{
					//-----------------------------------------------------------------------------------------------------------
					Stream PostStream = AsyncState.Request.EndGetRequestStream ( Async );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					string Boundary = AsyncState.Request.ContentType;

					Boundary = Boundary.Substring ( Boundary.LastIndexOf ( "=" ) + 1 );

					byte[] Boundarybytes = this.Encoding.GetBytes ( "\r\n--" + Boundary + "\r\n" );

					string Template = "Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}";
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Ecriture des Paramètres autres que les fichiers
					//-----------------------------------------------------------------------------------------------------------
					foreach ( var Item in this.QueryString )
						{
						//-------------------------------------------------------------------------------------------------------
						PostStream.Write ( Boundarybytes, 0, Boundarybytes.Length );

						byte[] formitembytes = this.Encoding.GetBytes ( string.Format ( Template, Item.Key, Item.Value ) );

						PostStream.Write ( formitembytes, 0, formitembytes.Length );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Ecriture des fichiers
					//-----------------------------------------------------------------------------------------------------------
					foreach ( var Item in this.Files )
						{
						//-------------------------------------------------------------------------------------------------------
						// Récupération des Infos Fichiers
						//-------------------------------------------------------------------------------------------------------
						string FileExts = Path.GetExtension ( Item.FileName ).ToLower ();
						string FileType = "application/octet-stream";

						if ( RestWebRequest.MimeTypes.ContainsKey ( FileExts ) )
							FileType = RestWebRequest.MimeTypes[FileExts];
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						PostStream.Write ( Boundarybytes, 0, Boundarybytes.Length );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Entête
						//-------------------------------------------------------------------------------------------------------
						string Header = "Content-Disposition: form-data; name=\"{0}\";" +
						                      " filename=\"{1}-{2}\"\r\nContent-Type: {3}\r\n\r\n";

						Header = string.Format ( Header                             , 
						                         Item.Form                          , 
						                         DateTime.Now.Ticks.ToString ( "x" ), 
						                         Item.FileName                      , 
						                         FileType                           );

						byte[] HeaderBytes = this.Encoding.GetBytes ( Header );

						PostStream.Write ( HeaderBytes, 0, HeaderBytes.Length );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						// Fichier
						//-------------------------------------------------------------------------------------------------------
						PostStream.Write ( Item.Raw, 0, Item.Raw.Length );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Finalisation
					//-----------------------------------------------------------------------------------------------------------
					byte[] Footer = this.Encoding.GetBytes ( "\r\n--" + Boundary + "--\r\n" );

					PostStream.Write ( Footer, 0, Footer.Length );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					PostStream.Close ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.QueryString.Count > 0 )
					{
					//-----------------------------------------------------------------------------------------------------------
					Stream PostStream = AsyncState.Request.EndGetRequestStream ( Async );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					byte Separator = (byte)0;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					foreach ( var Item in this.QueryString )
						{
						//-------------------------------------------------------------------------------------------------------
						if ( Separator != 0 ) PostStream.WriteByte ( Separator );

						byte[] Key   = UrlEncode ( Item.Key  , this.Encoding );
						byte[] Value = UrlEncode ( Item.Value, this.Encoding );

						PostStream.Write     ( Key  , 0, Key  .Length );
						PostStream.WriteByte ( (byte)'='              );
						PostStream.Write     ( Value, 0, Value.Length );
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						Separator = (byte)'&';
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					PostStream.Close ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				AsyncState.Request.BeginGetResponse ( AsyncResponseCallback, AsyncState );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( WebException Err )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncComplete ( AsyncState, Err, Err.Response );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( Exception Err ) { this.AsyncComplete ( AsyncState, Err, null ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Valide la réponse de la demande.
		/// </summary>
		/// <param name="Async">Résultat de l'opération asynchrone.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void AsyncResponseCallback ( IAsyncResult Async )
			{
			//-------------------------------------------------------------------------------------------------------------------
			AsyncRequestState AsyncState = Async.AsyncState as AsyncRequestState;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncComplete ( AsyncState, null, AsyncState.Request.EndGetResponse (Async) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( WebException Err )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncComplete ( AsyncState, Err, Err.Response );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch ( Exception Err ) { this.AsyncComplete ( AsyncState, Err, null ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Analyse la réponse.
		/// </summary>
		/// <param name="AsyncState">Objet permettant de suivre la demande.</param>
		/// <param name="Exception">Exception potentielle.</param>
		/// <param name="HttpResponse">Réponse à la demande.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void AsyncComplete ( AsyncRequestState AsyncState, Exception Exception, WebResponse Response )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.AsyncOperation == null ) return;

			this.AsyncOperation.Set ();
				
			this.AsyncOperation = null;

			HttpWebResponse HttpResponse = Response as HttpWebResponse;

			AsyncCompletedEventArgs E = null;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// La requête a été annulée
			//-------------------------------------------------------------------------------------------------------------------
			if ( AsyncState.Cancelled )
				{
				//---------------------------------------------------------------------------------------------------------------
				E = new AsyncCompletedEventArgs ( AsyncState.Request    ,
				                                  true                  , 
												  null                  , 
												  false                 , 
												  0                     , 
												  null                  ,
												  AsyncState.BaseAddress, 
												  null                  , 
												  AsyncState.UserToken  );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Il y a eu une exception
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Exception != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				E = new AsyncCompletedEventArgs ( AsyncState.Request   ,
				                                  false                , 
												  Exception            , 
												  false                , 
												  0                    , 
												  HttpResponse         ,
												  Response.ResponseUri , 
												  null                 , 
												  AsyncState.UserToken );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Pas de réponse
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Response == null )
				{
				//---------------------------------------------------------------------------------------------------------------
				Exception = new WebException ( "HttpWebResponse is null", WebExceptionStatus.ReceiveFailure );

				E = new AsyncCompletedEventArgs ( AsyncState.Request    ,
				                                  false                 , 
												  Exception             , 
												  false                 , 
												  0                     , 
												  HttpResponse          ,
												  AsyncState.BaseAddress, 
												  null                  , 
												  AsyncState.UserToken  );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On a une réponse
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				// Lecture des entêtes
				//---------------------------------------------------------------------------------------------------------------
				string Location = string.Empty;

				foreach ( string Header in HttpResponse.Headers )
					{
					//-----------------------------------------------------------------------------------------------------------
					// En cas de Found
					//-----------------------------------------------------------------------------------------------------------
					if      ( Header.EqualsIgnoreCase ( "Location"   ) )
						Location = HttpResponse.Headers[Header];
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Cookies
					//-----------------------------------------------------------------------------------------------------------
					else if ( Header.EqualsIgnoreCase ( "Set-Cookie" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						string[] Entries       = null;
						string   RawCookieData = HttpResponse.Headers[Header];

						if ( RawCookieData.IndexOf ( "," ) > 0 )
							Entries = RawCookieData.Split ( ',' );
						else
							Entries = new string[] { RawCookieData };
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						foreach ( string Entry in Entries )
							{
							//---------------------------------------------------------------------------------------------------
							string CookieData = Entry.Trim ();

							if ( CookieData.IndexOf ( ';' ) > 0 )
								CookieData = CookieData.Split ( ';' )[0];

							int Index = CookieData.IndexOf ( '=' );

							if ( Index > 0 )
								{
								string Key   = CookieData.Substring ( 0, Index  );
								string Value = CookieData.Substring ( Index + 1 );

								if ( Key != null && Value != null )
									this.Cookies[Key] = HttpUtility.UrlDecode ( Value );
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// La ressource est trouvée
				//---------------------------------------------------------------------------------------------------------------
				if ( HttpResponse.StatusCode == HttpStatusCode.Found )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Est ce une redirection ?
					//-----------------------------------------------------------------------------------------------------------
					if ( ! string.IsNullOrEmpty ( Location ) )
						{
						//-------------------------------------------------------------------------------------------------------
						Uri BaseAddress = AsyncState.Request.RequestUri;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( BaseAddress.IsAbsoluteUri )
							{
							//---------------------------------------------------------------------------------------------------
							string AbsoluteUri = BaseAddress.AbsoluteUri;

							AbsoluteUri = AbsoluteUri.Substring ( 0, 
								          AbsoluteUri.IndexOf   ( "/", 
										  AbsoluteUri.IndexOf   ( "//" ) + 2 ) );

							Uri RedirectUri = null;

							if      ( Location.StartsWith ( "http" ) )
								RedirectUri = new Uri (                     Location );
							else if ( Location.StartsWith ( "/"    ) )
								RedirectUri = new Uri ( AbsoluteUri +       Location );
							else
								RedirectUri = new Uri ( AbsoluteUri + "/" + Location );

							E = new AsyncCompletedEventArgs ( AsyncState.Request          ,
				                                              false                       , 
															  null                        , 
															  true                        , 
															  AsyncState.RedirectionsCount, 
															  HttpResponse                ,
															  RedirectUri                 , 
															  null                        , 
															  AsyncState.UserToken        );

							if ( AsyncState.OnComplete != null )
								AsyncState.OnComplete ( this, E );
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							if ( ! E.Cancel )
								{
								//-----------------------------------------------------------------------------------------------
								var Request = this.CreateRequest ( E.ResponseUri, true );

								this.Async ( new AsyncRequestState ( Request, AsyncState ) );
								//-----------------------------------------------------------------------------------------------
								}
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							return;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// On ne peut pas rediriger
					//-----------------------------------------------------------------------------------------------------------
					Exception = new WebException ( "Remote send found status and unset location", 
					                                            WebExceptionStatus.ProtocolError );
					
					E = new AsyncCompletedEventArgs ( AsyncState.Request          ,
				                                      false                       , 
													  Exception                   , 
													  true                        , 
													  AsyncState.RedirectionsCount, 
													  HttpResponse                ,
													  Response.ResponseUri        , 
													  null                        , 
													  AsyncState.UserToken        );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// La ressource est trouvée et on a du contenue
				//---------------------------------------------------------------------------------------------------------------
				else if ( HttpResponse.StatusCode == HttpStatusCode.OK )
					{
					//-----------------------------------------------------------------------------------------------------------
					try
						{
						//-------------------------------------------------------------------------------------------------------
						Stream Stream = HttpResponse.GetResponseStream () ?? new MemoryStream ();

						string ContentEncoding = HttpResponse.Headers["Content-Encoding"];

						if ( ! string.IsNullOrEmpty ( ContentEncoding ) )
							{
							if ( ContentEncoding.IndexOf ( "gzip", 
													   StringComparison.OrdinalIgnoreCase ) != -1 )
								{
								Stream = new GZipStream ( Stream, CompressionMode.Decompress );
								}
							else if ( ContentEncoding.IndexOf ( "deflate", 
													   StringComparison.OrdinalIgnoreCase ) != -1 )
								{
								Stream = new DeflateStream ( Stream, CompressionMode.Decompress );
								}
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						E = new AsyncCompletedEventArgs ( AsyncState.Request   ,
				                                          false                , 
														  null                 , 
														  false                , 
														  0                    , 
												          HttpResponse         ,
														  Response.ResponseUri , 
														  Stream               , 
														  AsyncState.UserToken );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					catch
						{
						//-------------------------------------------------------------------------------------------------------
						E = new AsyncCompletedEventArgs ( AsyncState.Request   ,
				                                          false                , 
														  null                 , 
														  false                , 
														  0                    , 
												          HttpResponse         ,
														  Response.ResponseUri , 
														  null                 , 
														  AsyncState.UserToken );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// On à rien :(
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					E = new AsyncCompletedEventArgs ( AsyncState.Request   ,
				                                      false                , 
													  null                 , 
													  false                , 
													  0                    , 
												      HttpResponse         ,
													  Response.ResponseUri , 
													  null                 , 
													  AsyncState.UserToken );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( AsyncState.OnComplete != null ) AsyncState.OnComplete ( this, E );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Publiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Annule une opération en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Cancel ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.AsyncOperation != null && this.AsyncOperation.Request != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AsyncOperation.Cancelled = true;

				try { this.AsyncOperation.Request.Abort (); } catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//               spécifié
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de <b>RestWebRequest</b> pour le modèle URI spécifié.
		/// </summary>
		/// <returns><b>RestWebRequest</b> pour le modèle URI spécifié.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static RestWebRequest Create () { return new RestWebRequest (); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appel la procédure de données.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public void Async ( AsyncCompletedEventHandler OnComplete, Uri Address, object UserToken )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Thread AsyncThread = new Thread ( () =>
				{
				var Request = this.CreateRequest ( Address, false );

				this.Async ( new AsyncRequestState ( Address, Request, this.TimeOut, UserToken, OnComplete ) );
				} ); 

			AsyncThread.IsBackground = true;

			AsyncThread.Start (); 
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit une collection de paires nom/valeur de cookies associées à la 
		/// demande.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public NameValueCollection Cookies { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtient et définit le System.Text.Encoding utilisé pour transférer et télécharger des 
		/// chaînes.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Encoding Encoding { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit une collection de paires nom/valeur de fichiers associées à la 
		/// demande.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public UploadFileCollection Files { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit une collection de paires nom/valeur d'en-tête associées à la 
		/// demande.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public NameValueCollection Headers { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit une collection de paires nom/valeur de requête associées à la 
		/// demande.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public NameValueCollection QueryString { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit la valeur du délai d'attente exprimé en millisecondes.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public int TimeOut { get; set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique s'il faut utiliser la compression.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool UseCompression { get; set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit l'agent à utiliser.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static string UserAgent { get; set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Web"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
