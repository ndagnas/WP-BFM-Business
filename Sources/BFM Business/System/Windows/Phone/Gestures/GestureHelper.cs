//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : GestureHelper.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'objet GestureHelper
// Créé le       : 17/01/2015
// Modifié le    : 05/05/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Media;
using Microsoft.Phone.Controls;
using System.Windows.Controls.Primitives;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using System.Windows.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Input = System.Windows.Input;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Windows.Phone.Gestures"
//*******************************************************************************************************************************
namespace System.Windows.Phone.Gestures
	{

	//   ###    #####   ####  #####  #   #  ####   #####
	//  #   #   #      #        #    #   #  #   #  #    
	//  #       ###     ###     #    #   #  ####   ###  
	//  #   ##  #          #    #    #   #  #   #  #    
	//   ### #  #####  ####     #     ###   #   #  #####

	//***************************************************************************************************************************
	// Classe GestureHelper
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Implémentation de la gestion des mouvements.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class GestureHelper
		{
		//***********************************************************************************************************************
		#region // Enumérateur DragLock
		//-----------------------------------------------------------------------------------------------------------------------
		private enum DragLock { Unset, Free, Vertical, Horizontal }
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Classe ManipulationBaseArgs
		//-----------------------------------------------------------------------------------------------------------------------
		private class ManipulationBaseArgs : InputBaseArgs
			{
			//*******************************************************************************************************************
			public ManipulationBaseArgs ( UIElement Container, Point Origin ) : base ( Container, Origin ) {}
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Classe ManipulationDeltaArgs
		//-----------------------------------------------------------------------------------------------------------------------
		private class ManipulationDeltaArgs : InputDeltaArgs
			{
			//-------------------------------------------------------------------------------------------------------------------
			private Point Cumulative, Delta;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			public ManipulationDeltaArgs ( UIElement Container , 
			                               Point     Origin    , 
										   Point     Cumulative, 
										   Point     Delta     ) : base ( Container, Origin )
				{ this.Cumulative = Cumulative; this.Delta = Delta; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			public override Point CumulativeTranslation { get { return this.Cumulative; } }
			public override Point DeltaTranslation      { get { return this.Delta     ; } }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Classe ManiulationCompletedArgs
		//-----------------------------------------------------------------------------------------------------------------------
		private class ManiulationCompletedArgs : InputCompletedArgs
			{
			//-------------------------------------------------------------------------------------------------------------------
			private Point Total;
			//-------------------------------------------------------------------------------------------------------------------

			//*******************************************************************************************************************
			public ManiulationCompletedArgs ( UIElement Container, Point Origin, Point Total ) : base ( Container, Origin )
				{ this.Total = Total; }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			public override Point TotalTranslation { get { return this.Total; } }
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		// Sectiond es Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private bool          Dragging;
		private DragLock      DragLockValue;
		private Point         GestureOrigin;
		private Point         GestureManipulation;
		private WeakReference GestureSource;
		private readonly Size DeadZoneInPixels = new Size(12.0, 12.0);
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>FacebookControl</b>.
		/// </summary>
		/// <param name="Target"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private GestureHelper ( UIElement Target ) { this.Target = Target; }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Statiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Target"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static GestureHelper Create ( UIElement Target )
			{
			//-------------------------------------------------------------------------------------------------------------------
			GestureHelper Helper = new GestureHelper ( Target );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Input.Touch.FrameReported += ( object S, Input.TouchFrameEventArgs A ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				Input.TouchPoint MainTouch = null;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					FrameworkElement Form = Helper.Target as FrameworkElement;

					while ( Form != null && ! ( Form is PhoneApplicationPage ) )
						Form = Form.Parent as FrameworkElement;

					if ( Form == null ) return;

					if ( Form != ((PhoneApplicationFrame)Application.Current.RootVisual).Content )
						return;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					MainTouch = A.GetPrimaryTouchPoint ( Helper.Target );

					if ( MainTouch == null ) return;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					FrameworkElement Parent = MainTouch.TouchDevice.DirectlyOver as FrameworkElement;

					while ( Parent != null && ! ( Parent is Popup ) )
						{
						var parent = Parent.Parent as FrameworkElement;

						if ( parent == null )
							parent = VisualTreeHelper.GetParent ( Parent ) as FrameworkElement;
						
						Parent = parent;
						}

					if ( Parent is Popup ) return;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Point Origin = A.GetPrimaryTouchPoint ( null ).Position;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( MainTouch.Action == Input.TouchAction.Down )
					{
					//-----------------------------------------------------------------------------------------------------------
					Helper.NotifyDown ( new ManipulationBaseArgs ( Helper.Target, Origin ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else  if ( MainTouch.Action == Input.TouchAction.Move )
					{
					//-----------------------------------------------------------------------------------------------------------
					var Cumulative = new Point ( Origin.X - Helper.GestureOrigin      .X, 
					                             Origin.Y - Helper.GestureOrigin      .Y );
					var Delta      = new Point ( Origin.X - Helper.GestureManipulation.X, 
					                             Origin.Y - Helper.GestureManipulation.Y );

					Helper.NotifyMove ( new ManipulationDeltaArgs ( Helper.Target, Origin, Cumulative, Delta ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else  if ( MainTouch.Action == Input.TouchAction.Up )
					{
					//-----------------------------------------------------------------------------------------------------------
					var Total = new Point ( Origin.X - Helper.GestureOrigin.X, 
					                        Origin.Y - Helper.GestureOrigin.Y );

					Helper.NotifyUp   ( new ManiulationCompletedArgs ( Helper.Target, Origin, Total ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				};
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			return Helper;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="X"></param>
		/// <param name="Y"></param>
		/// <returns></returns>
		//-----------------------------------------------------------------------------------------------------------------------
		private static double AngleFromVector ( double X, double Y )
			{
			//-------------------------------------------------------------------------------------------------------------------
			double Value = Math.Atan2 ( Y, X );

			if ( Value < 0.0 ) Value = 6.2831853071795862 + Value;

			return ( ( Value * 360.0 ) / 6.2831853071795862 );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Traitement
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NotifyDown ( InputBaseArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			GestureEventArgs NewArgs = new GestureEventArgs ();

			this.GestureSource       = new WeakReference ( Args.Source );
			this.GestureOrigin       = Args.Origin;
			this.GestureManipulation = Args.Origin;
			this.DragLockValue       = DragLock.Unset;
			this.Dragging            = false;

			this.RaiseGestureStart ( NewArgs );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NotifyMove ( InputDeltaArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ( Math.Abs ( Args.CumulativeTranslation.X ) > this.DeadZoneInPixels.Width ) || 
			     ( Math.Abs ( Args.CumulativeTranslation.Y ) > this.DeadZoneInPixels.Height ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.GestureManipulation = Args.Origin;

				if ( ! this.Dragging ) this.ReleaseMouseCaptureAtGestureOrigin ();

				this.Dragging = true;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( this.DragLockValue == DragLock.Unset )
					{
					//-----------------------------------------------------------------------------------------------------------
					double Value = AngleFromVector ( Args.CumulativeTranslation.X, Args.CumulativeTranslation.Y ) % 180.0;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ( Value <= 45.0 ) || ( Value >= 135.0 ) )
						{
						this.DragLockValue = DragLock.Horizontal;
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ( Value > 45.0 ) && ( Value < 135.0 ) )
						{
						this.DragLockValue = DragLock.Vertical;
						}
					//-----------------------------------------------------------------------------------------------------------
					else { this.DragLockValue = DragLock.Free; }
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.Dragging ) this.RaiseDragEvents ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NotifyUp ( InputCompletedArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			EventArgs Result = EventArgs.Empty;

			this.DragLockValue = DragLock.Unset;
			this.Dragging      = false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ( Args.TotalTranslation.X != 0.0 ) || ( Args.TotalTranslation.Y != 0.0 ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				DragEventArgs DragEvent = new DragEventArgs ();

				DragEvent.CumulativeDistance = Args.TotalTranslation;

				DragEvent.MarkAsFinalTouchManipulation();

				Result = DragEvent;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			this.RaiseGestureEnd ( Result );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ReleaseMouseCaptureAtGestureOrigin ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.GestureSource != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				FrameworkElement target = this.GestureSource.Target as FrameworkElement;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( target != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					foreach ( UIElement Item in VisualTreeHelper.FindElementsInHostCoordinates 
					         ( target.TransformToVisual ( null ).Transform ( this.GestureOrigin ), 
						                                         Application.Current.RootVisual ) )
						{
						Item.ReleaseMouseCapture();
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RaiseDragEvents ( InputDeltaArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			DragEventArgs NewArgs = new DragEventArgs ( Args );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Args.DeltaTranslation.X != 0.0 &&  this.DragLockValue == DragLock.Horizontal )
				{
				this.RaiseHorizontalDrag ( NewArgs );
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.DeltaTranslation.Y != 0.0 && this.DragLockValue == DragLock.Vertical )
				{
				this.RaiseVerticalDrag ( NewArgs );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RaiseGestureStart ( GestureEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			SafeRaise.Raise<GestureEventArgs> ( this.GestureStart, this, Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RaiseGestureEnd ( EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			SafeRaise.Raise<EventArgs> ( this.GestureEnd, this, Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RaiseHorizontalDrag ( DragEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			SafeRaise.Raise<DragEventArgs> ( this.HorizontalDrag, this, Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void RaiseVerticalDrag ( DragEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			SafeRaise.Raise<DragEventArgs> ( this.VerticalDrag, this, Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public EventHandler<EventArgs> GestureEnd;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public EventHandler<GestureEventArgs> GestureStart;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public EventHandler<DragEventArgs> HorizontalDrag;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		protected UIElement Target { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// 
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public EventHandler<DragEventArgs> VerticalDrag;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Windows.Phone.Gestures"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
