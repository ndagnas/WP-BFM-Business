//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : DelayedButton.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle DelayedButton
// Créé le       : 23/02/2015
// Modifié le    : 23/02/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Windows.Phone.Controls"
//*******************************************************************************************************************************
namespace System.Windows.Phone.Controls
	{

	//  ####   #   #  #####  #####   ###   #   #         ####    ###    ####  #####
	//  #   #  #   #    #      #    #   #  ##  #         #   #  #   #  #      #    
	//  ####   #   #    #      #    #   #  # # #  #####  ####   #####   ###   ###  
	//  #   #  #   #    #      #    #   #  #  ##         #   #  #   #      #  #    
	//  ####    ###     #      #     ###   #   #         ####   #   #  ####   #####

	//***************************************************************************************************************************
	// Classe DelayedButton
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit un champ groupe.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class DelayedButton : System.Windows.Controls.Primitives.ButtonBase
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private                DateTime           FocusedTime = DateTime.MinValue;
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty ClickDelayProperty;
		public static readonly DependencyProperty SensitiveProperty;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>DelayedButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static DelayedButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ClickDelayProperty = DependencyProperty.Register ( "ClickDelay", typeof (TimeSpan), 
			     typeof (DelayedButton), new PropertyMetadata ( TimeSpan.FromMilliseconds ( 0) ) );
			SensitiveProperty  = DependencyProperty.Register ( "Sensitive" , typeof (TimeSpan), 
			     typeof (DelayedButton), new PropertyMetadata ( TimeSpan.FromMilliseconds (15) ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>DelayedButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public DelayedButton () {}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnClick ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.ClickDelay.TotalMilliseconds > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Dispatcher.Async ( () => { base.OnClick (); }, (int)this.ClickDelay.TotalMilliseconds );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else { base.OnClick (); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Fournit la gestion de l'événement GotFocus.
		/// </summary>
		/// <param name="Args">RoutedEventArgs contenant les données de l'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnGotFocus ( RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.FocusedTime = DateTime.Now;

			base.OnGotFocus ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Fournit la gestion de l'événement LostMouseCapture.
		/// </summary>
		/// <param name="Args">MouseEventArgs contenant les données de l'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnLostMouseCapture ( MouseEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.FocusedTime != DateTime.MinValue && DateTime.Now.Subtract ( this.FocusedTime ) > Sensitive )
				base.OnLostMouseCapture ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Fournit la gestion de l'événement ManipulationCompleted.
		/// </summary>
		/// <param name="Args">MouseEventArgs contenant les données de l'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnManipulationCompleted ( ManipulationCompletedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnManipulationCompleted ( Args );

			if ( base.IsPressed )
				{
				if ( Args.TotalManipulation.Translation.X < -10 || 
				     Args.TotalManipulation.Translation.X >  10 ||
					 Args.TotalManipulation.Translation.Y < -10 || 
				     Args.TotalManipulation.Translation.Y >  10 )
					{
					base.IsPressed = false;
					}
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Indique s'il faut désactiver l'attente entre le click visuel et le click réel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public TimeSpan ClickDelay
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (TimeSpan)base.GetValue ( ClickDelayProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( ClickDelayProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique la sensibilité du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public TimeSpan Sensitive
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (TimeSpan)base.GetValue ( SensitiveProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( SensitiveProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Windows.Phone.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
