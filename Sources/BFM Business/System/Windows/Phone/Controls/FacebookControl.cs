//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : FacebookControl.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle FacebookControl
// Créé le       : 17/01/2015
// Modifié le    : 06/04/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Markup;
using System.Windows.Controls;
using System.Windows.Phone.Infos;
using System.Windows.Phone.Gestures;
using System.Windows.Media.Animation;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Ctrl = Microsoft.Phone.Controls;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Windows.Phone.Controls"
//*******************************************************************************************************************************
namespace System.Windows.Phone.Controls
	{

	//   ####  #      #  ####   #####         ####    ###   #   #  #####  #    
	//  #      #      #  #   #  #             #   #  #   #  ##  #  #      #    
	//   ###   #      #  #   #  ###    #####  ####   #####  # # #  ###    #    
	//      #  #      #  #   #  #             #      #   #  #  ##  #      #    
	//  ####   #####  #  ####   #####         #      #   #  #   #  #####  #####

	//***************************************************************************************************************************
	// Enumérateur SlidePanel
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit le type de panneau actuellement ouvert.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public enum SlidePanel
		{
		/// <summary>
		/// Panneau de gauche.
		/// </summary>
		Left  ,
		/// <summary>
		/// Panneau central.
		/// </summary>
		Center,
		/// <summary>
		/// Panneau de droite.
		/// </summary>
		Right ,
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	//  #####   ###    ###   #####  ####    ###    ###   #   #          ###   #####  ####   #    
	//  #      #   #  #   #  #      #   #  #   #  #   #  #  #          #   #    #    #   #  #    
	//  ###    #####  #      ###    ####   #   #  #   #  ###    #####  #        #    ####   #    
	//  #      #   #  #   #  #      #   #  #   #  #   #  #  #          #   #    #    #   #  #    
	//  #      #   #   ###   #####  ####    ###    ###   #   #          ###     #    #   #  #####

	//***************************************************************************************************************************
	// Classe FacebookControl
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Gère un contenant de type Facebook, cad avec 3 panneaux.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	[ContentProperty("Content")]
	public class FacebookControl : Control
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private bool       LeftToRightDragging       = false;
		private bool       RightToLeftDragging       = false;
		//-----------------------------------------------------------------------------------------------------------------------
		private bool       Locked                    = false;
		private Border     LeftPanel                 = null;
		private Border     RightPanel                = null;
		private Border     CenterPanel               = null;
		private Grid       PanelsContainer           = null;
		private Border     OverridePanel             = null;
		private bool       IsHorizontalDragging      = false;
		//-----------------------------------------------------------------------------------------------------------------------
		private SlidePanel FSelectedPanel            = SlidePanel.Center;
		//-----------------------------------------------------------------------------------------------------------------------
		private double     LeftPanelWidth            =  440.0;
		private double     LeftLockDistanceToOpen    =   55.0;
		private double     LeftDragDistanceToOpen    =   55.0;
		private double     LeftDragDistanceNegative  = -145.0;
		//-----------------------------------------------------------------------------------------------------------------------
		private double     RightPanelWidth           =  440.0;
		private double     RightLockDistanceToOpen   =   55.0;
		private double     RightDragDistanceToOpen   =   55.0;
		private double     RightDragDistanceNegative = -145.0;
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty ContentProperty;
		public static readonly DependencyProperty LeftContentProperty;
		public static readonly DependencyProperty RightContentProperty;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>FacebookControl</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static FacebookControl ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ContentProperty      = DependencyProperty.Register ( "Content"     , typeof (object), 
			                             typeof (FacebookControl), new PropertyMetadata ( null ) );
			LeftContentProperty  = DependencyProperty.Register ( "LeftContent" , typeof (object), 
			                             typeof (FacebookControl), new PropertyMetadata ( null ) );
			RightContentProperty = DependencyProperty.Register ( "RightContent", typeof (object), 
			                             typeof (FacebookControl), new PropertyMetadata ( null ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>FacebookControl</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public FacebookControl () { base.DefaultStyleKey = typeof (FacebookControl); }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// S'assure des largeurs des panneaux
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void EnsurePanelsWidth ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.LeftPanel != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LeftPanelWidth   = this.LeftPanel .ActualWidth;
				this.LeftPanel.Margin = new Thickness ( - this.LeftPanelWidth, 0, 0, 0 );

				this.LeftLockDistanceToOpen    =   this.LeftPanelWidth / 8;
				this.LeftDragDistanceToOpen    =   this.LeftPanelWidth / 8;
				this.LeftDragDistanceNegative  = - this.LeftPanelWidth / 3;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.RightPanel != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.RightPanelWidth   = this.RightPanel.ActualWidth;
				this.RightPanel.Margin = new Thickness ( 0, 0, - this.RightPanelWidth, 0 );

				this.RightLockDistanceToOpen    =   this.LeftPanelWidth / 8;
				this.RightDragDistanceToOpen    =   this.LeftPanelWidth / 8;
				this.RightDragDistanceNegative  = - this.LeftPanelWidth / 3;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Bloque le contenue du panneau centrale.
		/// </summary>
		/// <param name="Complete">Appelé à la fin de l'animation.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void LockContent ( bool Complete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Locked )
				{
				this.Locked = true;

				if ( this.BeginSlide != null ) this.BeginSlide ( this, EventArgs.Empty );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.CenterPanel != null && this.CenterPanel.Child != null )
				this.CenterPanel.Child.IsHitTestVisible = false;

			if ( this.OverridePanel != null && Complete )
				this.OverridePanel.Visibility = Visibility.Visible;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Débloque le contenue du panneau centrale.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void UnlockContent ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.Locked = false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.CenterPanel != null && this.CenterPanel.Child != null )
				this.CenterPanel.Child.IsHitTestVisible = true;

			if ( this.OverridePanel != null )
				this.OverridePanel.Visibility = Visibility.Collapsed;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre le panneau de gauche.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenLeftPanel  ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.LeftContent != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.EnsurePanelsWidth ();

				this.TranslateToOpen ( this.LeftPanelWidth );

				this.FSelectedPanel = SlidePanel.Left;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre le panneau de droite.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenRightPanel ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.RightContent != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.EnsurePanelsWidth ();

				this.TranslateToOpen ( -this.RightPanelWidth );

				this.FSelectedPanel = SlidePanel.Right;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Replace dans l'état précédent.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ResetLayoutRoot ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.EnsurePanelsWidth ();

			if      ( this.FSelectedPanel == SlidePanel.Left  ) this.Translate ( LeftPanelWidth );
			else if ( this.FSelectedPanel == SlidePanel.Right ) this.Translate (-RightPanelWidth);
			//-------------------------------------------------------------------------------------------------------------------
			else { this.Translate ( 0.0 ); this.UnlockContent (); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Anime le déplacement.
		/// </summary>
		/// <param name="Distance">Distance du déplacement.</param>
		/// <param name="Complete">Est appelé à la fin de l'animation.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Translate ( double Distance, Action Complete = null )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PanelsContainer != null )
				{
				var T = this.PanelsContainer.GetHorizontalOffset ().Transform;

				T.Animate ( T.X, Distance, TranslateTransform.XProperty, 150, 0, 
				                     new CubicEase { EasingMode = EasingMode.EaseOut }, Complete );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Anime l'ouverture d'un panneau latéral.
		/// </summary>
		/// <param name="Distance">Distance du déplacement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void TranslateToOpen ( double Distance )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.LockContent ( true );

			this.Translate ( Distance, () => { if ( this.SlideComplete != null ) 
			                                     this.SlideComplete ( this, EventArgs.Empty ); } );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Ferme le panneau latéral actuellement ouvert.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void TranslateToClose ( EventHandler Complete = null )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.FSelectedPanel = SlidePanel.Center;

			this.Translate ( 0, () =>
				{
				this.UnlockContent ();

				if ( this.SlideComplete != null ) this.SlideComplete ( this, EventArgs.Empty );
				if (      Complete      != null )      Complete      ( this, EventArgs.Empty );
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// S'assure de l'application du template actuel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public override void OnApplyTemplate ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnApplyTemplate ();

			this.PanelsContainer = base.GetTemplateChild ( "PanelsContainer" ) as Grid;
			this.LeftPanel       = base.GetTemplateChild ( "LeftPanel"       ) as Border;
			this.RightPanel      = base.GetTemplateChild ( "RightPanel"      ) as Border;
			this.CenterPanel     = base.GetTemplateChild ( "CenterPanel"     ) as Border;
			this.OverridePanel   = base.GetTemplateChild ( "OverridePanel"   ) as Border;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Gestion des mouvements
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PanelsContainer != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				GestureHelper Helper = GestureHelper.Create ( this );

				Helper.GestureStart   += this.OnGestureStart;
				Helper.HorizontalDrag += this.OnHorizontalDrag;
				Helper.VerticalDrag   += this.OnVerticalDrag;
				Helper.GestureEnd     += this.OnGestureEnd;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// gestion du panneau de blocage
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.OverridePanel != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.OverridePanel.Tap += ( A, B ) =>
					{ if ( this.FSelectedPanel != SlidePanel.Center ) this.TranslateToClose (); };
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Publiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Ferme la panneau actuellement ouvert.
		/// </summary>
		/// <param name="Complete">Est appelé à la fin de la fermeture.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public void CloseSelectedPanel ( EventHandler Complete )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if      ( this.SelectedPanel != SlidePanel.Center ) this.TranslateToClose ( Complete );
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Complete           != null              ) Complete ( this, EventArgs.Empty );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Liées aux Mouvements
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit au début d'un mouvement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnGestureStart ( object Sender, GestureEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.IsHorizontalDragging = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit pendant un mouvement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnVerticalDrag ( object Sender, System.Windows.Phone.Gestures.DragEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = DeviceInfos.Orientation;

			if ( Orientation == PhoneOrientation.Portrait )
				{
				if ( this.Locked && this.SelectedPanel == SlidePanel.Center )
					this.UnlockContent ();
				}
			else
				{
				if ( ! this.DisableSlide ) this.OnDrag ( Orientation, Args );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit pendant un mouvement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnHorizontalDrag ( object Sender, System.Windows.Phone.Gestures.DragEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = DeviceInfos.Orientation;

			if ( Orientation == PhoneOrientation.Portrait )
				{
				if ( ! this.DisableSlide ) this.OnDrag ( Orientation, Args );
				}
			else
				{
				if ( this.Locked && this.SelectedPanel == SlidePanel.Center )
					this.UnlockContent ();
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit pendant un mouvement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnDrag ( PhoneOrientation Orientation, System.Windows.Phone.Gestures.DragEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.DisableSlide ) return;

			this.IsHorizontalDragging = true;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			double PanelWidth     = 0.0;
			double OriginX        = 0.0;
			double DeltaDistanceX = 0.0;

			this.EnsurePanelsWidth ();

			switch ( Orientation )
				{
				case PhoneOrientation.Portrait :
					{
					PanelWidth     = Application.Current.Host.Content.ActualWidth;
					OriginX        = Args.Origin       .X;
					DeltaDistanceX = Args.DeltaDistance.X;
					
					break;
					}
				case PhoneOrientation.LandscapeLeft :
					{
					PanelWidth     = Application.Current.Host.Content.ActualHeight;
					OriginX        = Args.Origin       .Y;
					DeltaDistanceX = Args.DeltaDistance.Y;

					break;
					}
				case PhoneOrientation.LandscapeRight :
					{
					PanelWidth     = Application.Current.Host.Content.ActualHeight;
					OriginX        = PanelWidth - Args.Origin.Y;
					DeltaDistanceX = - Args.DeltaDistance.Y;

					break;
					}
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.Dragging )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.FSelectedPanel == SlidePanel.Center )
					{
					//-----------------------------------------------------------------------------------------------------------
					double Origin = OriginX - DeltaDistanceX;

					double LDistanceToOpen = (EdgeOnly) ? LeftLockDistanceToOpen : PanelWidth;
					double RDistanceToOpen = (EdgeOnly) ? PanelWidth - RightLockDistanceToOpen : 0;

					this.LeftToRightDragging = ( this.LeftContent  != null && 
					                              DeltaDistanceX > 0 && Origin < LDistanceToOpen );
					this.RightToLeftDragging = ( this.RightContent != null && 
					                              DeltaDistanceX < 0 && Origin > RDistanceToOpen );

					this.Dragging = ( this.LeftToRightDragging || this.RightToLeftDragging );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else { this.Dragging = true; }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.Dragging )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( DeltaDistanceX != 0 && this.FSelectedPanel == SlidePanel.Center )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftToRightDragging )
						{
						double offset = this.PanelsContainer.GetHorizontalOffset ().Value + DeltaDistanceX;

						this.LockContent ( false );

						this.PanelsContainer.SetHorizontalOffset ( Math.Min ( Math.Max ( offset, 0 ),  LeftPanelWidth  ) );

						if ( offset < 0 )
							{ this.LeftToRightDragging = false; this.Dragging = false; }
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( this.RightToLeftDragging )
						{
						double offset = this.PanelsContainer.GetHorizontalOffset ().Value + DeltaDistanceX;

						this.LockContent ( false );

						this.PanelsContainer.SetHorizontalOffset ( Math.Max ( Math.Min ( offset, 0 ), -RightPanelWidth ) );

						if ( offset > 0 )
							{ this.RightToLeftDragging = false; this.Dragging = false; }
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.FSelectedPanel == SlidePanel.Left )
					{
					//-----------------------------------------------------------------------------------------------------------
					double offset = this.PanelsContainer.GetHorizontalOffset ().Value + DeltaDistanceX;

					this.PanelsContainer.SetHorizontalOffset ( Math.Min ( Math.Max ( offset, 0 ),  LeftPanelWidth  ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.FSelectedPanel == SlidePanel.Right )
					{
					//-----------------------------------------------------------------------------------------------------------
					double offset = this.PanelsContainer.GetHorizontalOffset ().Value + DeltaDistanceX;

					this.PanelsContainer.SetHorizontalOffset ( Math.Max ( Math.Min ( offset, 0 ), -RightPanelWidth ) );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit à la fin d'un mouvement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnGestureEnd ( object Sender, EventArgs OldArgs )
			{
			//-------------------------------------------------------------------------------------------------------------------
			var Args = OldArgs as System.Windows.Phone.Gestures.DragEventArgs;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.Dragging && this.IsHorizontalDragging && Args != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				double CumulativeDistanceX = 0.0;

				switch ( DeviceInfos.Orientation )
					{
					case PhoneOrientation.Portrait       : CumulativeDistanceX =   Args.CumulativeDistance.X; break;
					case PhoneOrientation.LandscapeLeft  : CumulativeDistanceX =   Args.CumulativeDistance.Y; break;
					case PhoneOrientation.LandscapeRight : CumulativeDistanceX = - Args.CumulativeDistance.Y; break;
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( this.FSelectedPanel == SlidePanel.Left )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( CumulativeDistanceX < LeftDragDistanceNegative ) this.TranslateToClose ();
					else                                                  this.ResetLayoutRoot  ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.FSelectedPanel == SlidePanel.Right )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( CumulativeDistanceX > -RightDragDistanceNegative ) this.TranslateToClose ();
					else                                                    this.ResetLayoutRoot  ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.FSelectedPanel == SlidePanel.Center )
					{
					//-----------------------------------------------------------------------------------------------------------
					if      ( CumulativeDistanceX >=  LeftDragDistanceToOpen  ) this.OpenLeftPanel   ();
					else if ( CumulativeDistanceX <= -RightDragDistanceToOpen ) this.OpenRightPanel  ();
					else                                                        this.ResetLayoutRoot ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.Dragging             = false;
			this.LeftToRightDragging  = false;
			this.RightToLeftDragging  = false;
			this.IsHorizontalDragging = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit au début du glissement.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler BeginSlide;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le contenue du panneau central.
		/// </summary>
		/// <returns>Objet.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public object Content
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (object)base.GetValue ( ContentProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( ContentProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si les panneaux sont désactivés.
		/// </summary>
		/// <returns>Objet.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool DisableSlide { get; set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si un mouvement d'un panneau est en cours.
		/// </summary>
		/// <returns>Objet.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool Dragging { get; private set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Indique si le mouvement doit se limiter aux bordures.
		/// </summary>
		/// <returns>
		/// <b>True</b> indique que le mouvement se limite aux bordures, sinon <b>False</b>.
		/// </returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool EdgeOnly { get; set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le contenue du panneau de gauche.
		/// </summary>
		/// <returns>Objet.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public object LeftContent
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (object)base.GetValue ( LeftContentProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( LeftContentProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le contenue du panneau de droite.
		/// </summary>
		/// <returns>Objet.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public object RightContent
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (object)base.GetValue ( RightContentProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( RightContentProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le panneau sélectionné.
		/// </summary>
		/// <returns>Une des valeurs de <b>SlidePanel</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public SlidePanel SelectedPanel
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return this.FSelectedPanel; }
			//-------------------------------------------------------------------------------------------------------------------
			set
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.FSelectedPanel != value )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.FSelectedPanel == SlidePanel.Center )
						{
						if ( value == SlidePanel.Left ) this.OpenLeftPanel  ();
						else                            this.OpenRightPanel ();
						}
					else this.TranslateToClose ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit à la fin du glissement.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler SlideComplete;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Windows.Phone.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
