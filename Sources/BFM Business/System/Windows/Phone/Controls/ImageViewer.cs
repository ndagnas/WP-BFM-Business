//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : ImageViewer.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle ImageViewer
// Créé le       : 23/02/2015
// Modifié le    : 23/02/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Controls;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Windows.Phone.Controls"
//*******************************************************************************************************************************
namespace System.Windows.Phone.Controls
	{

	//  #  #   #   ###    ###    #####         #   #  #  #####  #   #  #####  #### 
	//  #  ## ##  #   #  #   #   #             #   #  #  #      #   #  #      #   #
	//  #  # # #  #####  #       ###    #####  #   #  #  ###    #   #  ###    #### 
	//  #  #   #  #   #  #   ##  #              # #   #  #      # # #  #      #   #
	//  #  #   #  #   #   ### #  #####           #    #  #####   # #   #####  #   #

	//***************************************************************************************************************************
	// Classe ImageViewer
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Fournit un champ Image.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class ImageViewer : Control
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty ErrorMessageProperty;
		public static readonly DependencyProperty GalleryModeProperty;
		public static readonly DependencyProperty InnerPaddingProperty;
		public static readonly DependencyProperty LoadingMessageProperty;
		public static readonly DependencyProperty SourceProperty;
		//-----------------------------------------------------------------------------------------------------------------------
		private Grid               Root;
		private Point?             LastOrigin;
		private Image              ImageControl;
		private TextBlock          ErrorMessageControl;
		private TextBlock          LoadingMessageControl;
		private double             LastUniformScale;
		private CompositeTransform RootRenderTransform;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>ImageViewer</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static ImageViewer ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			ErrorMessageProperty   = DependencyProperty.Register ( "ErrorMessage"  , typeof (string     ), 
			                typeof (ImageViewer), new PropertyMetadata ( "apperçu indisponible"       ) );
			GalleryModeProperty    = DependencyProperty.Register ( "GalleryMode"   , typeof (bool       ), 
			                typeof (ImageViewer), new PropertyMetadata ( false                        ) );
			InnerPaddingProperty   = DependencyProperty.Register ( "InnerPadding"  , typeof (Thickness  ), 
			                typeof (ImageViewer), new PropertyMetadata ( new Thickness ( 0          ) ) );
			LoadingMessageProperty = DependencyProperty.Register ( "LoadingMessage", typeof (string     ), 
			                typeof (ImageViewer), new PropertyMetadata ( "chargement de l'apperçu..." ) );
			SourceProperty         = DependencyProperty.Register ( "Source"        , typeof (ImageSource), 
			                typeof (ImageViewer), new PropertyMetadata ( null, OnSourceChanged        ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>ImageViewer</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public ImageViewer () { base.DefaultStyleKey = typeof (ImageViewer); }
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// S'assure de l'application du template actuel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public override void OnApplyTemplate ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.OnApplyTemplate ();

			this.LoadingMessageControl = base.GetTemplateChild ( "LoadingMessage" ) as TextBlock;
			this.ErrorMessageControl   = base.GetTemplateChild ( "ErrorMessage"   ) as TextBlock;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ImageControl = base.GetTemplateChild ( "Image" ) as Image;

			if ( this.ImageControl != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.ImageControl.ImageOpened += (S, A) =>
					{
					this.LoadingMessageControl.Visibility = Visibility.Collapsed;
					this.ErrorMessageControl  .Visibility = Visibility.Collapsed;
					this.ImageControl         .Visibility = Visibility.Visible;

					if ( this.ImageOpened != null ) this.ImageOpened ( this, EventArgs.Empty );
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.ImageControl.ImageFailed += (S, A) =>
					{
					this.LoadingMessageControl.Visibility = Visibility.Collapsed;
					this.ErrorMessageControl  .Visibility = Visibility.Visible;
					this.ImageControl         .Visibility = Visibility.Collapsed;

					if ( this.ImageFailed != null ) this.ImageFailed ( this, EventArgs.Empty );
					};
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.Root = this.GetTemplateChild ( "Root" ) as Grid;

			if ( this.Root != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Root.ManipulationStarted += this.OnManipulationStarted;
				this.Root.ManipulationDelta   += this.OnManipulationDelta;
				this.Root.DoubleTap           += this.OnDoubleTap;

				this.Root.RenderTransform = this.RootRenderTransform = new CompositeTransform ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.UpdateSource ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Fournit le comportement de la passe de mesure (Measure) de la disposition Windows 
		/// Phone.
		/// </summary>
		/// <param name="AvailableSize">
		/// La taille disponible que cet objet peut attribuer à des objets enfants.
		/// </param>
		/// <returns>
		/// Taille que cet objet détermine et dont il a besoin pendant la disposition, selon 
		/// ses calculs des dimensions attribuées aux objets enfants.
		/// </returns>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override Size MeasureOverride ( Size AvailableSize )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Clip = new RectangleGeometry () { Rect = new Rect ( new Point (), AvailableSize ) };

			return base.MeasureOverride ( AvailableSize );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Gère le début de la manipulation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnManipulationStarted ( object Sender, ManipulationStartedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.LastUniformScale = Math.Sqrt(2);

			this.LastOrigin       = null;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit pendant la manipulation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnManipulationDelta ( object Sender, ManipulationDeltaEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			var Transform = (CompositeTransform)this.Root.RenderTransform;

			if ( Transform != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Origin = Args.ManipulationContainer.TransformToVisual ( this ).Transform ( Args.ManipulationOrigin );

				if ( ! LastOrigin.HasValue ) LastOrigin = Origin;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Calculate uniform scale factor
				//---------------------------------------------------------------------------------------------------------------
				double UniformScale = Math.Sqrt ( 
					Math.Pow ( Args.CumulativeManipulation.Scale.X, 2 ) + 
					Math.Pow ( Args.CumulativeManipulation.Scale.Y, 2 ) );

				if ( UniformScale == 0 ) UniformScale = LastUniformScale;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Current scale factor
				//---------------------------------------------------------------------------------------------------------------
				double Scale = UniformScale / LastUniformScale;

				if ( Scale > 0 && Transform.ScaleX * Scale < 1 ) Scale = 1 / Transform.ScaleX;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Apply scaling and offset caused by scaling
				//---------------------------------------------------------------------------------------------------------------
				if ( Scale > 0 && Scale != 1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					Transform.ScaleY = Transform.ScaleX *= Scale;

					var ul = this.Root.TransformToVisual ( this ).Transform ( new Point () );

					Transform.TranslateX = Origin.X - ( Origin.X - ul.X ) * Scale;
					Transform.TranslateY = Origin.Y - ( Origin.Y - ul.Y ) * Scale;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				double X = Transform.TranslateX + ( Origin.X - LastOrigin.Value.X );
				double Y = Transform.TranslateY + ( Origin.Y - LastOrigin.Value.Y );

				double RootWidth    = this.Root.ActualWidth;
				double RootHeight   = this.Root.ActualHeight;
				double ActualWidth  = this.ImageControl.ActualWidth;
				double ActualHeight = this.ImageControl.ActualHeight;

				double MinX = ( ( RootWidth  - ActualWidth  ) / 2 ) * Transform.ScaleX;
				double MinY = ( ( RootHeight - ActualHeight ) / 2 ) * Transform.ScaleY;

				double MaxX = ( ActualWidth  * Transform.ScaleY ) - RootWidth  + MinX;
				double MaxY = ( ActualHeight * Transform.ScaleY ) - RootHeight + MinY;

				double OffsetX = ( ( RootWidth  - ActualWidth  ) / 2 );
				double OffsetY = ( ( RootHeight - ActualHeight ) / 2 );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				double AreaWidth  = RootWidth  - this.InnerPadding.Left - this.InnerPadding.Right;
				double AreaHeight = RootHeight - this.InnerPadding.Top  - this.InnerPadding.Bottom;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ActualWidth * Transform.ScaleX < AreaWidth || 
				                  ( this.InnerPadding.Left == 0 && this.InnerPadding.Right == 0 ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( Transform.ScaleX == 1 ) MinX = MaxX = 0;
					else if ( RootWidth  > ActualWidth  * Transform.ScaleX )
						MinX = MaxX = ( OffsetX * Transform.ScaleX ) - 
					                  ( ( RootWidth  - ( ActualWidth  * Transform.ScaleX ) ) / 2 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					MinX = (-this.InnerPadding.Left   + MinX);
					MaxX = ( this.InnerPadding.Right  + MaxX);
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( ActualHeight * Transform.ScaleY < AreaHeight || 
				                  ( this.InnerPadding.Top == 0 && this.InnerPadding.Bottom == 0 ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( Transform.ScaleY == 1 ) MinY = MaxY = 0;
					else if ( RootHeight > ActualHeight * Transform.ScaleY )
						MinY = MaxY = ( OffsetY * Transform.ScaleY ) - 
					                  ( ( RootHeight - ( ActualHeight * Transform.ScaleY ) ) / 2 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					MinY = (-this.InnerPadding.Top    + MinY);
					MaxY = ( this.InnerPadding.Bottom + MaxY);
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Transform.TranslateX = Math.Min ( -MinX, Math.Max ( X, -MaxX ) );
				Transform.TranslateY = Math.Min ( -MinY, Math.Max ( Y, -MaxY ) );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LastOrigin       = Origin;
				this.LastUniformScale = UniformScale;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit pendant la manipulation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnDoubleTap ( object Sender, GestureEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			var Transform = (CompositeTransform)this.Root.RenderTransform;

			if ( Transform != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				Transform.ScaleY = Transform.ScaleX += 1;

				var Origin = Args.GetPosition ( this );

				Transform.TranslateX -= ( Origin.X );
				Transform.TranslateY -= ( Origin.Y );

				this.LastUniformScale = Transform.ScaleX;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Est appelé quand la propriété Source change.
		/// </summary>
		/// <param name="Sender">
		/// <b>DependencyObject</b> dans lequel la propriété a modifié une valeur.
		/// </param>
		/// <param name="Args">
		/// Données d'événement publiées par un événement qui suit les modifications apportées à 
		/// la valeur effective de cette propriété.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void OnSourceChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ImageViewer Self = Sender as ImageViewer;

			if ( Self != null ) Self.UpdateSource ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Est appelé quand la propriété Source change.
		/// </summary>
		/// <param name="Sender">
		/// <b>DependencyObject</b> dans lequel la propriété a modifié une valeur.
		/// </param>
		/// <param name="Args">
		/// Données d'événement publiées par un événement qui suit les modifications apportées à 
		/// la valeur effective de cette propriété.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void UpdateSource ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.Root != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.GalleryMode )
					{
					if ( this.Source != null )
						{
						this.LoadingMessageControl.Visibility = Visibility.Collapsed;
						this.ErrorMessageControl  .Visibility = Visibility.Collapsed;
						this.ImageControl         .Visibility = Visibility.Visible;

						this.ImageControl.Source = this.Source;
						}
					else
						{
						this.LoadingMessageControl.Visibility = Visibility.Visible;
						this.ErrorMessageControl  .Visibility = Visibility.Collapsed;
						this.ImageControl         .Visibility = Visibility.Collapsed;
						}
					}
				else
					{
					this.LoadingMessageControl.Visibility = Visibility.Visible;
					this.ErrorMessageControl  .Visibility = Visibility.Collapsed;
					this.ImageControl         .Visibility = Visibility.Collapsed;
					}

				if ( this.Root != null )
					{
					var RenderTransform = (CompositeTransform)this.Root.RenderTransform;

					if ( RenderTransform != null )
						{
						RenderTransform.ScaleX     = 1.0;
						RenderTransform.ScaleY     = 1.0;
						RenderTransform.TranslateX = 0.0;
						RenderTransform.TranslateY = 0.0;
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'image est chargée.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler ImageOpened;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'image n'a pu être chargée.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler ImageFailed;
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit le message d'erreur. 
		/// </summary>
		/// <returns>Booleen.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public string ErrorMessage
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (string)base.GetValue ( ErrorMessageProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( ErrorMessageProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit si on est en mode gallery. 
		/// </summary>
		/// <returns>Booleen.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool GalleryMode
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (bool)base.GetValue ( GalleryModeProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( GalleryModeProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit les marges de déplacements autorisés. 
		/// </summary>
		/// <returns>Objet <b>Thickness</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public Thickness InnerPadding
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (Thickness)base.GetValue ( InnerPaddingProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( InnerPaddingProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit le texte de chargement. 
		/// </summary>
		/// <returns>Booleen.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public string LoadingMessage
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (string)base.GetValue ( LoadingMessageProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( LoadingMessageProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit l'image associée au bouton. 
		/// </summary>
		/// <returns>URI du fichier image.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public ImageSource Source
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (ImageSource)base.GetValue ( SourceProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( SourceProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Windows.Phone.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
