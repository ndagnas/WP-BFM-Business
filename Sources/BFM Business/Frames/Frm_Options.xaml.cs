//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Frm_Options.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation de l'écran Options
// Créé le       : 29/06/2015
// Modifié le    : 10/07/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Net;
using System.Windows;
using System.Xml.Linq;
using System.MarketPlace;
using System.Globalization;
using System.Windows.Media;
using System.Windows.Controls;
using System.Windows.Threading;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Windows.Media.Imaging;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextRadio.Panels;
using NextRadio.Service;
using NextRadio.Scheduler;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextRadio"
//*******************************************************************************************************************************
namespace NextRadio.Frames
	{

	//  #####  ####   #   #          ###   ####   #####  #   ###   #   #   ####
	//  #      #   #  ## ##         #   #  #   #    #    #  #   #  ##  #  #    
	//  ###    ####   # # #  #####  #   #  ####     #    #  #   #  # # #   ### 
	//  #      #   #  #   #         #   #  #        #    #  #   #  #  ##      #
	//  #      #   #  #   #          ###   #        #    #   ###   #   #  #### 
	
	//***************************************************************************************************************************
	#region // Frame Frm_Options
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit la fenêtre Player.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Frm_Options : PhoneApplicationPage
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private static bool IntReloadingIsRequired  = false;
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private        bool DynamicsTileCheckValue  = false;
		private        int  NotificationsDelayValue = 0;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Frm_Options</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Frm_Options ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.InitializeComponent ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.DynamicsTileCheckValue  = ScheduledAgent.TileIsActive && Instance.ScheduledAgentActive;

			this.NotificationsDelayValue = ( Instance.ScheduledAgentActive ) ? ScheduledAgent.ToastDelay : 0;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Affichage des sections
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Instance.PanelMode )
				{
				case PanelMode.Column : this.PanelModePicker.SelectedIndex = 1; break;
				case PanelMode.Grid   : this.PanelModePicker.SelectedIndex = 2; break;
				case PanelMode.List   : this.PanelModePicker.SelectedIndex = 3; break;
				default               : this.PanelModePicker.SelectedIndex = 0; break;
				}

			this.PanelModePicker.Visibility = ( DeviceInfos.Version != WindowsPhoneVersion.WP10 ).ToVisibility ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Taille de la police
			//-------------------------------------------------------------------------------------------------------------------
			switch ( StyleSheets.TextLevel )
				{
				case TextLevel.Small : this.TextLevelPicker.SelectedIndex = 0; break;
				case TextLevel.Large : this.TextLevelPicker.SelectedIndex = 2; break;
				default              : this.TextLevelPicker.SelectedIndex = 1; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Qualité des vidéos
			//-------------------------------------------------------------------------------------------------------------------
			switch ( RestService.MediaQuality )
				{
				case MediaQuality.Low      : this.MediaQualityPicker.SelectedIndex = 0; break;
				case MediaQuality.Medium   : this.MediaQualityPicker.SelectedIndex = 1; break;
				case MediaQuality.Excelent : this.MediaQualityPicker.SelectedIndex = 3; break;
				default                    : this.MediaQualityPicker.SelectedIndex = 2; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Charger les articles à la UNE
			//-------------------------------------------------------------------------------------------------------------------
			this.LoadHeadlinesCheck.IsChecked = RestService.LoadHeadlines;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Utiliser le thème sombre
			//-------------------------------------------------------------------------------------------------------------------
			this.DarkThemeCheck.IsChecked = ( StyleSheets.Theme == AppTheme.Dark );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Garder les menus visible
			//-------------------------------------------------------------------------------------------------------------------
			this.ExpandMenuCheck.IsChecked = Instance.ExpandMenu;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer la compression
			//-------------------------------------------------------------------------------------------------------------------
			this.UseCompressionCheck.IsChecked = RestService.UseCompression;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Activer les tuiles dynamiques
			//-------------------------------------------------------------------------------------------------------------------
			this.DynamicsTileCheck.IsChecked = this.DynamicsTileCheckValue;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Notifications Toast
			//-------------------------------------------------------------------------------------------------------------------
			switch ( this.NotificationsDelayValue )
				{
				case 1  : this.NotificationsPicker.SelectedIndex = 1; break;
				case 2  : this.NotificationsPicker.SelectedIndex = 2; break;
				case 4  : this.NotificationsPicker.SelectedIndex = 3; break;
				default : this.NotificationsPicker.SelectedIndex = 0; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Version
			//-------------------------------------------------------------------------------------------------------------------
			this.VersionLabel.Text = string.Format ( "Version {0}.{1}.{2}.{3}"     , 
			                                         VersionUtils.Current.Major    , 
			                                         VersionUtils.Current.Minor    , 
			                                         VersionUtils.Current.Build    , 
			                                         VersionUtils.Current.Revision );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.OnOrientationChanged ( new OrientationChangedEventArgs ( PageOrientation.None ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
			
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Traite le chargement de mes apps.
		/// </summary>
		/// <param name="Sender"></param>
		/// <param name="Args"></param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void MarketPlaceAppContentCompleted ( object Sender, 
		                                                    DownloadStringCompletedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			string ImgMask = "http://cdn.marketplaceimages.windowsphone.com/v8/images/{0}?imageType=ws_icon_medium";

			List<AppButton> Apps = new List<AppButton> ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! string.IsNullOrEmpty ( Args.Result ) )
					{
					//-----------------------------------------------------------------------------------------------------------
					// Retrait des 'a:'
					//-----------------------------------------------------------------------------------------------------------
					var Content = new System.Text.StringBuilder ( Args.Result );

					for ( int Index = 0 ; Index < Content.Length - 3 ; Index ++ )
						{
						char Car = Content[Index];

						if ( Car == '<' || Car == '/' )
							{
							if ( Content[Index + 1] == 'a' && Content[Index + 2] == ':' )
								{
								Content.Remove ( Index + 1, 2 );
								}
							}
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					XNamespace ns = "http://schemas.zune.net/catalog/apps/2008/02";

					XElement Document = XElement.Parse ( Content.ToString () );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					// Lecture des Apps
					//-----------------------------------------------------------------------------------------------------------
					foreach ( XElement XItem in Document.Elements ( ns + "entry" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						var XId = XItem.Element ( ns + "id" );

						if ( XId == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						var XTitle = XItem.Element ( ns + "title" );

						if ( XTitle == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						var XImage = XItem.Element ( ns + "image" );

						if ( XImage == null ) continue;

						var XImageSrc = XImage.Element ( ns + "id" );

						if ( XImageSrc == null ) continue;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						string ImageSrc = XImageSrc.Value.Replace ( "urn:uuid:", "" );

						ImageSrc = string.Format ( ImgMask, ImageSrc );

						Apps.Add ( new AppButton ()
							{
							Content = XTitle.Value                            ,
							Tag     = XId.Value.Replace ( "urn:uuid:", "" )   ,
							Source  = new BitmapImage ( new Uri ( ImageSrc ) ),
							} );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Apps.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.AppsBlock.Children.Clear ();

				foreach ( AppButton Button in Apps ) this.AppsBlock.Children.Add ( Button );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.LoadingBlock.Visibility = Visibility.Collapsed;
			this.AppsBlock   .Visibility = Visibility.Visible;

			this.ProgressBar.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLoaded ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ProgressBar.IsIndeterminate = true;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				CultureInfo CultureInfo = CultureInfo.CurrentCulture;

				string CultureName   = CultureInfo.Name;
				string CultureLetter = (CultureName.Length == 5) ? CultureName.Substring ( 3, 2 ) : string.Empty;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Version Version = Environment.OSVersion.Version;

				if ( Version.Major > 8 ) Version = new Version ( 8, 10, 0, 0 );
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				var Request = new WebClient ();

				Request.Headers["User-Agent"] = "MarketPlace Application Infos Both/1.0";

				string Mask = "http://marketplaceedgeservice.windowsphone.com/v9/catalog/apps" +
				              "?os={0}"                                                        +
				              "&lang={1}"                                                      +
				              "&cc={2}"                                                        +
				              "&dm="                                                           +
				              "&oemId="                                                        +
				              "&moId="                                                         +
				              "&chunkSize=50"                                                  +
				              "&orderBy=GlobalRank"                                            +
				              "&publisher=Nicolas+Dagnas"                                      +
				              "&cf=99-1"                                                       +
				              "&category=windowsphone.newsandweather";

				string Uri = string.Format ( Mask, Version, CultureName, CultureLetter );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Request.DownloadStringCompleted += this.MarketPlaceAppContentCompleted;

				Request.DownloadStringAsync ( new Uri ( Uri ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnOrientationChanged ( OrientationChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = DeviceInfos.Orientation;

			this.AppLeftBar  .Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).ToVisibility ();
			this.RightAppBar .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).ToVisibility ();
			this.BottomAppBar.Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnOrientationChanged ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Liées aux Contrôles
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement d'état de la case à cocher.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCheckChanged ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ToggleSwitch Switch = Sender as ToggleSwitch;

			bool Value = ( Switch.IsChecked ?? true );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Charger les articles à la UNE
			//-------------------------------------------------------------------------------------------------------------------
			if ( Sender == this.LoadHeadlinesCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				RestService.LoadHeadlines = Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Utiliser le thème sombre
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.DarkThemeCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				StyleSheets.Theme = ( Value ) ? AppTheme.Dark : AppTheme.Light;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Garder les menus visible
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.ExpandMenuCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				Instance.ExpandMenu = Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer la compression
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.UseCompressionCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activé" : "Désactivé";

				RestService.UseCompression = Value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Activer les tuiles dynamiques
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.DynamicsTileCheck )
				{
				//---------------------------------------------------------------------------------------------------------------
				Switch.Content = ( Value ) ? "Activée" : "Désactivée";

				if ( Value != this.DynamicsTileCheckValue )
					{
					//-----------------------------------------------------------------------------------------------------------
					ScheduledAgent.TileIsActive = Value;

					this.Dispatcher.Async ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.CheckScheduledAgentStatus ();
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( Value && ! Instance.ScheduledAgentActive )
							{
							//---------------------------------------------------------------------------------------------------
							string Caption = "Exécution en tâche de fond";
							string Message = "Le système ne permet pas ou n'autorise pas" +
							                 " l'exécution de {0} en tâche de fond."      +
											 "\n\n"                                       +
											 "Veuillez vérifier vos paramètres.";

							MessageBox.Show ( string.Format ( Message, AppInfos.Name ), Caption, MessageBoxButton.OK );
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							this.DynamicsTileCheck.IsChecked = false;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						else { ScheduledAgent.Clear (); }
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						this.DynamicsTileCheckValue = ( this.DynamicsTileCheck.IsChecked ?? true );
						//-------------------------------------------------------------------------------------------------------
						}, 500 );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand on change d'onglet.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPivotSelectionChanged ( object Sender, SelectionChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.PanelModePicker    .Close ();
			this.TextLevelPicker    .Close ();
			this.MediaQualityPicker .Close ();
			this.NotificationsPicker.Close ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand une option modifiée implique un raffraichissement.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnReloadingIsRequiredClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Frm_Options.IntReloadingIsRequired = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors du changement du sélecteur de délai.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>SelectionChangedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnSelectionChanged ( object Sender, SelectionChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Affichage des sections
			//-------------------------------------------------------------------------------------------------------------------
			if ( Sender == this.PanelModePicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( this.PanelModePicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 1  : Instance.PanelMode = PanelMode.Column; break;
					case 2  : Instance.PanelMode = PanelMode.Grid;   break;
					case 3  : Instance.PanelMode = PanelMode.List;   break;
					default : Instance.PanelMode = PanelMode.Popup;  break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Taille de la police
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.TextLevelPicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Args.AddedItems.Count == 1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					TextLevel Value = StyleSheets.TextLevel;
					//-----------------------------------------------------------------------------------------------------------
				
					//-----------------------------------------------------------------------------------------------------------
					switch ( this.TextLevelPicker.SelectedIndex )
						{
						//-------------------------------------------------------------------------------------------------------
						case 0  : Value = TextLevel.Small;  break;
						case 2  : Value = TextLevel.Large;  break;
						default : Value = TextLevel.Medium; break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Value != StyleSheets.TextLevel )
						{
						//-------------------------------------------------------------------------------------------------------
						StyleSheets.TextLevel = Value;

						Frm_Options.IntReloadingIsRequired = true;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Qualité des vidéos
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.MediaQualityPicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( this.MediaQualityPicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 0  : RestService.MediaQuality = MediaQuality.Low;      break;
					case 1  : RestService.MediaQuality = MediaQuality.Medium;   break;
					case 3  : RestService.MediaQuality = MediaQuality.Excelent; break;
					default : RestService.MediaQuality = MediaQuality.High;     break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Notifications Toast
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Sender == this.NotificationsPicker )
				{
				//---------------------------------------------------------------------------------------------------------------
				int Value = 0;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				switch ( this.NotificationsPicker.SelectedIndex )
					{
					//-----------------------------------------------------------------------------------------------------------
					case 1 : Value = 1; break;
					case 2 : Value = 2; break;
					case 3 : Value = 4; break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Value != this.NotificationsDelayValue )
					{
					//-----------------------------------------------------------------------------------------------------------
					ScheduledAgent.ToastDelay = Value;

					this.Dispatcher.Async ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.CheckScheduledAgentStatus ();
						//-------------------------------------------------------------------------------------------------------
						
						//-------------------------------------------------------------------------------------------------------
						if ( Value > 0 && ! Instance.ScheduledAgentActive )
							{
							//---------------------------------------------------------------------------------------------------
							string Caption = "Exécution en tâche de fond";
							string Message = "Le système ne permet pas ou n'autorise pas" +
							                 " l'exécution de {0} en tâche de fond."      +
											 "\n\n"                                       +
											 "Veuillez vérifier vos paramètres.";

							MessageBox.Show ( string.Format ( Message, AppInfos.Name ), Caption, MessageBoxButton.OK );
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							Value = 0;

							this.NotificationsPicker.SelectedIndex = 0;
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						this.NotificationsDelayValue = Value;
						//-------------------------------------------------------------------------------------------------------
						}, 500 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des ApplicationBarIconButton
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnReturnButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.NavigationService.CanGoBack )
				this.NavigationService.GoBack ();
			else
				Instance.RootFrame.Navigate ( new Uri ("/Frames/Frm_Home.xaml", UriKind.Relative) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton <b>laisser une évaluation</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnRateButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ApplicationReview.Show ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton <b>contacter l'auteur</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnFeedbackButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			EmailComposeTask Task = new EmailComposeTask ()
				{
				Subject = AppInfos.Name                             ,
				Body    = ""                                        ,
				To      = AppInfos.Name + "<nds-wp-news@outlook.fr>",
				};

			try { Task.Show (); } catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Propriété => ReloadingIsRequired
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Indique si l'application doit se raffraichir.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static bool ReloadingIsRequired
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					return Frm_Options.IntReloadingIsRequired;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				finally { Frm_Options.IntReloadingIsRequired = false; }
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	//***************************************************************************************************************************
	#region // Contrôle AppButton
	//---------------------------------------------------------------------------------------------------------------------------
	public class AppButton : System.Windows.Controls.Button
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty SourceProperty;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>AppButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static AppButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			SourceProperty = DependencyProperty.Register ( "Source", typeof (ImageSource), 
			                                   typeof (AppButton), new PropertyMetadata ( null ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>AppButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public AppButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			base.DefaultStyleKey = typeof (AppButton);

			base.SetValue ( Microsoft.Phone.Controls.TiltEffect.IsTiltEnabledProperty, true );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur l'objet.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnClick ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				MarketplaceDetailTask Task = new MarketplaceDetailTask ()
					{
					ContentIdentifier = this.Tag.ToString ()               ,
					ContentType       = MarketplaceContentType.Applications,
					};

				Task.Show ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit le <b>ImageSource</b> de l'image. 
		/// </summary>
		/// <returns>URI du fichier image.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public ImageSource Source
			{
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			get { return (ImageSource)base.GetValue ( SourceProperty        ); }
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			set {                     base.SetValue ( SourceProperty, value ); }
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextRadio"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
