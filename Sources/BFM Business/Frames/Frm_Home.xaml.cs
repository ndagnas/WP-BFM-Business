//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Frm_Home.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du point d'entrée de l'application
// Créé le       : 29/06/2015
// Modifié le    : 20/11/2015
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Linq;
using System.Windows;
using System.MarketPlace;
using System.Windows.Media;
using System.ComponentModel;
using System.Windows.Controls;
using System.Windows.Threading;
using System.IO.IsolatedStorage;
using System.Windows.Navigation;
using System.Collections.Generic;
using System.Windows.Phone.Infos;
using System.Windows.Phone.Shell;
using System.Windows.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Tasks;
using Microsoft.Phone.Shell;
using Microsoft.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using NextRadio.Panels;
using NextRadio.Popups;
using NextRadio.Service;
using NextRadio.Scheduler;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "NextRadio"
//*******************************************************************************************************************************
namespace NextRadio.Frames
	{

	//  #####  ####   #   #         #   #   ###   #   #  #####
	//  #      #   #  ## ##         #   #  #   #  ## ##  #    
	//  ###    ####   # # #  #####  #####  #   #  # # #  ###  
	//  #      #   #  #   #         #   #  #   #  #   #  #    
	//  #      #   #  #   #         #   #   ###   #   #  #####
	
	//***************************************************************************************************************************
	#region // Frame Home
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit la fenêtre principale.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Frm_Home : PhoneApplicationPage, IPhoneApplicationPage
		{
		//***********************************************************************************************************************
		#region // classe WebNavigator
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Permet la gestion d'une pile de nabigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		class WebNavigator
			{
			//-------------------------------------------------------------------------------------------------------------------
			class WebNavigatorItem { public object Source; public int Top; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Section des Attributs
			//-------------------------------------------------------------------------------------------------------------------
			private List<WebNavigatorItem> Items = new List<WebNavigatorItem> ();
			//-------------------------------------------------------------------------------------------------------------------
		
			//*******************************************************************************************************************
			/// <summary>
			/// Ajoute un élément navigué.
			/// </summary>
			/// <param name="Source">Elément navigué.</param>
			//-------------------------------------------------------------------------------------------------------------------
			public void Add ( object Source )
				{ this.Items.Add ( new WebNavigatorItem () { Source = Source, Top = 0 } ); }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Recule d'un cran en arrière et renvoi l'élément vers lequel naviguer.
			/// </summary>
			/// <returns></returns>
			//-------------------------------------------------------------------------------------------------------------------
			public object GoBack ()
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.Items.Count > 1 )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.Items.RemoveAt ( this.Items.Count - 1 );

					return this.Last;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return null;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Indique si l'ém=lément est le dernier chargé.
			/// </summary>
			/// <param name="Source">Elément à comparer.</param>
			/// <returns>
			/// <b>True</b> si l'élément est le dernier chargé, sinon <b>False</b>.
			/// </returns>
			//-------------------------------------------------------------------------------------------------------------------
			public bool IsLast ( object Source )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Source != null && this.Items.Count > 0 )
					{
					//-----------------------------------------------------------------------------------------------------------
					WebNavigatorItem LastItem = this.Items[this.Items.Count - 1];
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Source is SectionType && LastItem.Source is SectionType )
						{
						//-------------------------------------------------------------------------------------------------------
						SectionType A = (SectionType)Source;
						SectionType B = (SectionType)LastItem.Source;

						return ( A == B );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Source is Article && LastItem.Source is Article )
						{
						//-------------------------------------------------------------------------------------------------------
						Article A = (Article)Source;
						Article B = (Article)LastItem.Source;

						return ( A.ArticleID == B.ArticleID );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				return false;
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens le nombre déléments navigués.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public int Count { get { return this.Items.Count; } }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Indique s'il est possible de naviguer en arrière.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public bool CanGoBack { get { return ( this.Items.Count > 1 ); } }
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens le dernier élément chargé.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public object Last
				{
				//---------------------------------------------------------------------------------------------------------------
				get
					{
					//-----------------------------------------------------------------------------------------------------------
					return (this.Items.Count > 0) ? this.Items[this.Items.Count - 1].Source : null;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************

			//*******************************************************************************************************************
			/// <summary>
			/// Obtiens ou définit la position en Y de la dernière page.
			/// </summary>
			//-------------------------------------------------------------------------------------------------------------------
			public int Top
				{
				//---------------------------------------------------------------------------------------------------------------
				get
					{
					//-----------------------------------------------------------------------------------------------------------
					return ( this.Items.Count > 0 ) ? this.Items[this.Items.Count - 1].Top : 0;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				set
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.Items.Count > 0 ) this.Items[this.Items.Count - 1].Top = value;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//*******************************************************************************************************************
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Constantes
		//-----------------------------------------------------------------------------------------------------------------------
		private static Brush DarkThemeBrush  = new SolidColorBrush ( Color.FromArgb ( 0xFF, 0x15, 0x15, 0x15 ) );
		private static Brush LightThemeBrush = new SolidColorBrush ( Color.FromArgb ( 0xFF, 0xEA, 0xEA, 0xEA ) );
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private SectionType         CurrentSection   = SectionType.All;
		private Article             ToastedArticle   = Article.Empty;
		private bool                Initialized      = false;
		private WebNavigator        PageNavigator    = new WebNavigator ();
		//-----------------------------------------------------------------------------------------------------------------------
		private ImageViewerPopup    ImageViewerPopup = null;
		//-----------------------------------------------------------------------------------------------------------------------
		private LeftPanelColumnMode LeftPanelColumn  = null;
		private LeftPanelGridMode   LeftPanelGrid    = null;
		private LeftPanelListMode   LeftPanelList    = null;
		private LeftPanelPopupMode  LeftPanelPopup   = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Boutons d'Application
		//-----------------------------------------------------------------------------------------------------------------------
		private ApplicationBarIconButton HomeAppBarButton             = null; // Page Section
		private ApplicationBarIconButton PinAppBarButton              = null; // Page Section
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton ReturnAppBarButton           = null; // Page Article
		private ApplicationBarIconButton ShareAppBarButton            = null; // Page Article
		private ApplicationBarIconButton BookmarkInAppBarButton       = null; // Page Article
		private ApplicationBarIconButton BookmarkOutAppBarButton      = null; // Page Article
		private ApplicationBarMenuItem   ViewOnlineAppBarMenu         = null; // Page Article
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton CloseImageViewerAppBarButton = null; // Popup Zoom
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton CloseSectionsAppBarButton    = null; // Popup Sections
		//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		private ApplicationBarIconButton RefreshAppBarButton          = null; // Global
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		// Prototype   : public Frm_Home ()
		// Description : Constructeur de la classe
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Frm_Home</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Frm_Home ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.InitializeComponent ();

			this.ApplyTheme ( StyleSheets.Theme );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#region // Création des boutons d'application
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.HomeAppBarButton             = new ApplicationBarIconButton ();
			this.PinAppBarButton              = new ApplicationBarIconButton ();
			this.ReturnAppBarButton           = new ApplicationBarIconButton ();
			this.ShareAppBarButton            = new ApplicationBarIconButton ();
			this.BookmarkInAppBarButton       = new ApplicationBarIconButton ();
			this.BookmarkOutAppBarButton      = new ApplicationBarIconButton ();
			this.ViewOnlineAppBarMenu         = new ApplicationBarMenuItem   ();
			this.CloseImageViewerAppBarButton = new ApplicationBarIconButton ();
			this.CloseSectionsAppBarButton    = new ApplicationBarIconButton ();
			this.RefreshAppBarButton          = new ApplicationBarIconButton ();
			
			this.HomeAppBarButton            .IconUri = new Uri ( "/Images/Application/home.png"        , UriKind.Relative );
			this.PinAppBarButton             .IconUri = new Uri ( "/Images/Application/pin.png"         , UriKind.Relative );
			this.ReturnAppBarButton          .IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.ShareAppBarButton           .IconUri = new Uri ( "/Images/Application/share.png"       , UriKind.Relative );
			this.BookmarkInAppBarButton      .IconUri = new Uri ( "/Images/Application/bookmark-in.png" , UriKind.Relative );
			this.BookmarkOutAppBarButton     .IconUri = new Uri ( "/Images/Application/bookmark-out.png", UriKind.Relative );
			this.CloseImageViewerAppBarButton.IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.CloseSectionsAppBarButton   .IconUri = new Uri ( "/Images/Application/left.png"        , UriKind.Relative );
			this.RefreshAppBarButton         .IconUri = new Uri ( "/Images/Application/refresh.png"     , UriKind.Relative );

			this.HomeAppBarButton            .Text = "accueil";
			this.PinAppBarButton             .Text = "épingler";
			this.ReturnAppBarButton          .Text = "retour";
			this.ShareAppBarButton           .Text = "partager";
			this.BookmarkInAppBarButton      .Text = "enregistrer";
			this.BookmarkOutAppBarButton     .Text = "supprimer";
			this.ViewOnlineAppBarMenu        .Text = "visualiser en ligne";
			this.CloseImageViewerAppBarButton.Text = "retour";
			this.CloseSectionsAppBarButton   .Text = "retour";
			this.RefreshAppBarButton         .Text = "recharger";

			this.HomeAppBarButton            .Click += this.OnHomeButtonClick;
			this.PinAppBarButton             .Click += this.OnPinButtonClick;
			this.ReturnAppBarButton          .Click += this.OnReturnButtonClick;
			this.ShareAppBarButton           .Click += this.OnShareButtonClick;
			this.BookmarkInAppBarButton      .Click += this.OnBookmarkInButtonClick;
			this.BookmarkOutAppBarButton     .Click += this.OnBookmarkOutButtonClick;
			this.ViewOnlineAppBarMenu        .Click += this.OnViewOnlineMenuClick;
			this.CloseImageViewerAppBarButton.Click += this.OnCloseImageViewerButtonClick;
			this.CloseSectionsAppBarButton   .Click += this.OnCloseSectionsButtonClick;
			this.RefreshAppBarButton         .Click += this.OnRefreshButtonClick;

			this.ApplicationBar.MenuItems.Add ( this.ViewOnlineAppBarMenu );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
			this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );

			this.ActiveLeftPanel ();

			this.IsIndeterminate = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le panneau de gauche.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLeftPanelClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Mode Menu de gauche
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.LayoutRoot.SelectedPanel == SlidePanel.Left )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( Args is ObjectEventArgs<SectionType> )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.Suspend ();
						
					var Arguments = Args as ObjectEventArgs<SectionType>;

					if ( Arguments != null )
						{
						//-------------------------------------------------------------------------------------------------------
						this.LayoutRoot.CloseSelectedPanel ( (X, Y) =>
							{
							if ( this.PageNavigator.IsLast ( Arguments.Self ) )
								this.Navigate ( false, Arguments.Self );
							else
								this.Navigate ( true , Arguments.Self );
							} );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					this.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.RootFrame.Navigate ( new Uri ( "/Frames/Frm_Options.xaml", UriKind.Relative ) );
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mode Popup
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.SectionsPopupContainer.Visibility == Visibility.Visible )
				{
				//---------------------------------------------------------------------------------------------------------------
				var Arguments = Args as ObjectEventArgs<SectionType>;

				if ( Arguments != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.PageNavigator.IsLast ( Arguments.Self ) )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.Suspend ();

						this.CloseSectionsPopup (                       );
						this.Navigate           ( false, Arguments.Self );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.Suspend ();

						this.CloseSectionsPopup (                      );
						this.Navigate           ( true, Arguments.Self );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					this.Dispatcher.BeginInvoke ( () =>
						{
						//-------------------------------------------------------------------------------------------------------
						Instance.RootFrame.Navigate ( new Uri ( "/Frames/Frm_Options.xaml", UriKind.Relative ) );
						//-------------------------------------------------------------------------------------------------------
						} );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le thème en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ActiveLeftPanel ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Instance.PanelMode )
				{
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.Grid :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelGrid == null )
						{
						this.LeftPanelGrid = new LeftPanelGridMode ();

						this.LeftPanelGrid.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelGrid )
						this.LayoutRoot.LeftContent = this.LeftPanelGrid;

					this.SectionsPopupContainer.Child = null;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.List :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelList == null )
						{
						this.LeftPanelList = new LeftPanelListMode ();

						this.LeftPanelList.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelList )
						this.LayoutRoot.LeftContent = this.LeftPanelList;

					this.SectionsPopupContainer.Child = null;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.Column :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelColumn == null )
						{
						this.LeftPanelColumn = new LeftPanelColumnMode ();

						this.LeftPanelColumn.Click += this.OnLeftPanelClick;
						}

					if ( this.LayoutRoot.LeftContent != this.LeftPanelColumn )
						this.LayoutRoot.LeftContent = this.LeftPanelColumn;

					this.SectionsPopupContainer.Child = null;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				case PanelMode.Popup :
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.LeftPanelPopup == null )
						{
						this.LeftPanelPopup = new LeftPanelPopupMode ();

						this.LeftPanelPopup.Click += this.OnLeftPanelClick;
						}

					if ( this.SectionsPopupContainer.Child != this.LeftPanelPopup )
						this.SectionsPopupContainer.Child = this.LeftPanelPopup;

					this.LayoutRoot.LeftContent = null;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					break;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le thème en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ApplyTheme ( AppTheme Theme )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Brush ThemeBrush = ( Theme == AppTheme.Light ) ? LightThemeBrush : DarkThemeBrush;

			this.Layout           .Background = ThemeBrush;
			this.WebBrowserControl.Background = ThemeBrush;
			this.WebBrowserCache  .Fill       = ThemeBrush;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Applique le thème en cours.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void SetTitle ( SectionType Section )
			{
			//-------------------------------------------------------------------------------------------------------------------
			switch ( Section )
				{
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.All          : this.Section.Text = "TOUTE L'ACTUALITÉ";             break;
				case SectionType.Bookmarks    : this.Section.Text = "MES FAVORIS";                   break;
				//---------------------------------------------------------------------------------------------------------------
				case SectionType.Banking      : this.Section.Text = "ASSURANCE, BANQUE";             break;
				case SectionType.Construction : this.Section.Text = "IMMOBILIER, BTP";               break;
				case SectionType.Culture      : this.Section.Text = "CULTURE, LOISIRS, MÉDIAS";      break;
				case SectionType.Distribution : this.Section.Text = "CONSOMMATION, DISTRIBUTION";    break;
				case SectionType.Employment   : this.Section.Text = "EMPLOI";                        break;
				case SectionType.Energy       : this.Section.Text = "ENERGIE, GREEN BUSINESS";       break;
				case SectionType.France       : this.Section.Text = "FRANCE";                        break;
				case SectionType.Industry     : this.Section.Text = "INDUSTRIE, MATIÈRES PREMIÈRES"; break;
				case SectionType.Innovation   : this.Section.Text = "INNOVATION, TECH, TÉLÉCOM";     break;
				case SectionType.Observatory  : this.Section.Text = "L'OBSERVATOIRE";                break;
				case SectionType.Sport        : this.Section.Text = "SPORT BUSINESS";                break;
				case SectionType.Tourism      : this.Section.Text = "LUXE, TOURISME";                break;
				case SectionType.Transport    : this.Section.Text = "AUTOMOBILE, TRANSPORT";         break;
				case SectionType.World        : this.Section.Text = "MONDE";                         break;
				case SectionType.YourMoney    : this.Section.Text = "VOTRE ARGENT";                  break;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Dérivées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'une pression sur le bouton Précédent.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>CancelEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnBackKeyPress ( System.ComponentModel.CancelEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.BeginBackKeyPress != null )
				{
				Delegate[] Delegates = this.BeginBackKeyPress.GetInvocationList ();

				foreach ( Delegate CallBack in Enumerable.Reverse<Delegate> ( Delegates ) )
					((EventHandler<CancelEventArgs>)CallBack) ( this, Args );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnBackKeyPress ( Args );

			if ( Args.Cancel ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// ImageViewer
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.ImageViewerPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseImageViewerPopup ();

				Args.Cancel = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// SectionsPopup
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.SectionsPopupContainer.Visibility == Visibility.Visible )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseSectionsPopup ();

				Args.Cancel = true;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// Page Web
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! Args.Cancel )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.LayoutRoot.SelectedPanel != SlidePanel.Center  )
					{
					//-----------------------------------------------------------------------------------------------------------
					Args.Cancel = true;

					this.LayoutRoot.SelectedPanel = SlidePanel.Center;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Gestion du Buffer
				//---------------------------------------------------------------------------------------------------------------
				else if ( this.PageNavigator.CanGoBack )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.GoBack ();

					Args.Cancel = true;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Déclenche l'événement <b>Loaded</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>RoutedEventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLoaded ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Initialized = true;

				this.UpdadeApplicationBarIconButton ();

				this.ApplicationBar.IsVisible = true;

				this.Dispatcher.Async ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! this.ToastedArticle.IsEmpty )
						this.Navigate ( true, this.ToastedArticle );
					else
						this.Navigate ( true, this.CurrentSection );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					ScheduledAgent.Clear ();
					//-----------------------------------------------------------------------------------------------------------
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appelé lorsqu'une page devient la page active dans une frame.
		/// </summary>
		/// <param name="Args">Objet qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnNavigatedTo ( NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! this.Initialized )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( this.NavigationContext != null && this.NavigationContext.QueryString != null 
				                                     && Args.NavigationMode == NavigationMode.New )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( this.NavigationContext.QueryString.ContainsKey ( "Section" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						switch ( this.NavigationContext.QueryString["Section"] )
							{
							case "Bookmarks"    : CurrentSection = SectionType.Bookmarks;    break;
							case "Banking"      : CurrentSection = SectionType.Banking;      break;
							case "Construction" : CurrentSection = SectionType.Construction; break;
							case "Culture"      : CurrentSection = SectionType.Culture;      break;
							case "Distribution" : CurrentSection = SectionType.Distribution; break;
							case "Employment"   : CurrentSection = SectionType.Employment;   break;
							case "Energy"       : CurrentSection = SectionType.Energy;       break;
							case "France"       : CurrentSection = SectionType.France;       break;
							case "Industry"     : CurrentSection = SectionType.Industry;     break;
							case "Innovation"   : CurrentSection = SectionType.Innovation;   break;
							case "Observatory"  : CurrentSection = SectionType.Observatory;  break;
							case "Sport"        : CurrentSection = SectionType.Sport;        break;
							case "Tourism"      : CurrentSection = SectionType.Tourism;      break;
							case "Transport"    : CurrentSection = SectionType.Transport;    break;
							case "World"        : CurrentSection = SectionType.World;        break;
							case "YourMoney"    : CurrentSection = SectionType.YourMoney;    break;
							}

						this.SetTitle ( this.CurrentSection );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					else if ( this.NavigationContext.QueryString.ContainsKey ( "ArticleID" ) )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ToastedArticle = Article.Parse ( this.NavigationContext.QueryString );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Args.NavigationMode == NavigationMode.Back )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Dispatcher.Async ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					this.LayoutRoot.CloseSelectedPanel ( (X, Y) => { this.ActiveLeftPanel (); } );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Frm_Options.ReloadingIsRequired )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplyTheme ( StyleSheets.Theme );

						this.NavigateTo ( true, this.PageNavigator.Last );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( this.IsIndeterminate )
						{
						//-------------------------------------------------------------------------------------------------------
						this.NavigateTo ( true, this.PageNavigator.Last );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}, 500 );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Appelé après la modification de la propriété Orientation.
		/// </summary>
		/// <param name="Args">Arguments d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		protected override void OnOrientationChanged ( OrientationChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			PhoneOrientation Orientation = Args.Orientation.ToPhoneOrientation ();
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			this.LeftMenuPanel .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).ToVisibility ();
			this.AppLeftBar    .Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).ToVisibility ();
			this.TitlePanel    .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();
			this.ChromeBar     .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();
			this.RightMenuPanel.Visibility = ( Orientation == PhoneOrientation.LandscapeRight ).ToVisibility ();
			this.RightAppBar   .Visibility = ( Orientation == PhoneOrientation.LandscapeLeft  ).ToVisibility ();
			this.BottomAppBar  .Visibility = ( Orientation == PhoneOrientation.Portrait       ).ToVisibility ();

			if ( DeviceInfos.Version != WindowsPhoneVersion.WP81 )
				SystemTray.IsVisible = ( Orientation == PhoneOrientation.Portrait );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Orientation == PhoneOrientation.LandscapeLeft )
				this.ImageViewerPopupContainer.SetValue ( Grid.ColumnProperty, 0 );
			//-------------------------------------------------------------------------------------------------------------------
			else
				this.ImageViewerPopupContainer.SetValue ( Grid.ColumnProperty, 1 );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Orientation == PhoneOrientation.Portrait )
				{
				this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
				this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, DeviceInfos.ApplicationBarHeight );
				}
			else
				{
				this.ImageViewerPopupContainer.Margin = new Thickness ( 0, 0, 0, 0 );
				this.SectionsPopupContainer   .Margin = new Thickness ( 0, 0, 0, 0 );
				}

			if ( this.LeftPanelPopup != null )
				this.LeftPanelPopup.OnOrientationChanged ( Orientation );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			base.OnOrientationChanged ( Args );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion de la Navigation
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Navigate ( bool AllowCache, object Source )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				object StrScrollTop = this.WebBrowserControl.Eval ( "window.pageYOffset.toString()" );

				if ( StrScrollTop is string )
					this.PageNavigator.Top = StrScrollTop.ToString ().ToInteger ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On place la page dans le Buffer
			//-------------------------------------------------------------------------------------------------------------------
			this.PageNavigator.Add ( Source );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mise à jours des Icones
			//-------------------------------------------------------------------------------------------------------------------
			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On y va
			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( AllowCache, Source );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Lance le direct.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NavigateToLive ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			Instance.RootFrame.Navigate ( new Uri ("/Frames/Frm_Player.xaml", UriKind.Relative) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void GoBack ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			// On place la page dans le Buffer
			//-------------------------------------------------------------------------------------------------------------------
			object Source = this.PageNavigator.GoBack ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mise à jours des Icones
			//-------------------------------------------------------------------------------------------------------------------
			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On y va
			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( true, Source );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Rafraichit la page courante.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void Refresh ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.Count > 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				object StrScrollTop = this.WebBrowserControl.Eval ( "window.pageYOffset.toString()" );

				if ( StrScrollTop is string )
					this.PageNavigator.Top = StrScrollTop.ToString ().ToInteger ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			this.NavigateTo ( false, this.PageNavigator.Last );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance une navigation.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NavigateTo ( bool AllowCache, object Source )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = true;
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// On charge une Section
			//-------------------------------------------------------------------------------------------------------------------
			if ( Source is SectionType )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CurrentSection = (SectionType)Source;

				this.SetTitle ( this.CurrentSection );

				if ( this.CurrentSection == SectionType.Bookmarks )
					RestService.GetBookmarks     ( this.NavigateOnComplete                                  );
				else
					RestService.GetArticlesList  ( this.NavigateOnComplete, AllowCache, this.CurrentSection );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On charge un Article
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Source is Article )
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Article = (Article)Source;

				this.SetTitle ( this.CurrentSection );

				if ( Article.IsSingleLink )
					this.NavigateOnComplete ( Article, new RestEventArgs ( Article, string.Empty ) );
				else
					RestService.GetArticle ( NavigateOnComplete, AllowCache, Article );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand le contenue est prêt à être chargé.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>RestEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void NavigateOnComplete ( object Sender, RestEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object Source = Args.AssociateObject;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Article
			//-------------------------------------------------------------------------------------------------------------------
			if ( Source is Article )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.UpdadeApplicationBarIconButton ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Chargement du résultat
			//-------------------------------------------------------------------------------------------------------------------
			if ( ! string.IsNullOrEmpty ( Args.Content ) )
				{
				if ( this.PageNavigator.IsLast ( Source ) )
					{
					if ( Source is Article )
						{
						Article Article = (Article)Source;

						if ( Args.Result == RestRequestResult.NotFound && ! string.IsNullOrEmpty ( Article.Uri ) )
							{
							this.WebBrowserControl.Navigate ( new Uri ( Article.Uri ) );
							}
						else { this.WebBrowserControl.NavigateToString ( Args.Content ); }
						}
					else { this.WebBrowserControl.NavigateToString ( Args.Content ); }
					}
				else { this.WebBrowser_LoadCompleted ( this, null ); }
				}
			else
				{
				if ( Source is Article )
					{
					Article Article = (Article)Source;

					if ( Article.IsSingleLink )
						{
						try
							{
							this.WebBrowserControl.Navigate ( new Uri ( Article.Uri ) );
							}
						catch { this.WebBrowser_LoadCompleted ( this, null ); }
						}
					else { this.WebBrowser_LoadCompleted ( this, null ); }
					}
				else { this.WebBrowser_LoadCompleted ( this, null ); }
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#region // Evaluation & Mise à jour
			//-------------------------------------------------------------------------------------------------------------------
			#if ! DEBUG
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Evaluation ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( ApplicationReview.IsAvailable )
				{
				//---------------------------------------------------------------------------------------------------------------
				ApplicationReview.SuggestReview ( AppInfos.Guid, AppInfos.Name );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Mise à jour ?
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				ApplicationInfos.AsyncGet ( (S, A) =>
					{ A.SuggestUpdateIfNewer ( VersionUtils.Current ); }, AppInfos.Guid );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endif
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures associées au Navigateur
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit après le chargement du contenu par le contrôle WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_LoadCompleted ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Obtention de la position en Y
			//-------------------------------------------------------------------------------------------------------------------
			int Top = this.PageNavigator.Top;

			if ( Top > 0 )
				this.WebBrowserControl.Eval ( "document.documentElement.scrollTop = " + Top );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// On met à jour le titre au cas ou
			//-------------------------------------------------------------------------------------------------------------------
			Article CurrentArticle = this.PageNavigator.Last as Article;

			if ( CurrentArticle != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( string.IsNullOrEmpty ( CurrentArticle.Title ) )
					{
					string Title = this.WebBrowserControl.Eval ( "document.title" ) as string;

					if ( ! string.IsNullOrEmpty ( Title ) )
						{
						CurrentArticle.Title = System.Net.HttpUtility.HtmlDecode ( Title );

						this.UpdadeApplicationBarIconButton ();
						}
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Maintenant que c'est chargé, on retire le cache
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.WebBrowserCache.Visibility == Visibility.Visible )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.Dispatcher.Async ( () =>
					{ this.WebBrowserCache.Visibility = Visibility.Collapsed; } );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors de la navigation du contrôle du WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigatingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_Navigating ( object Sender, NavigatingEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Args.Uri == null ) { Args.Cancel = true; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// La page est une page externe
			//-------------------------------------------------------------------------------------------------------------------
			Article CurrentArticle = this.PageNavigator.Last as Article;

			if ( CurrentArticle == null || ! CurrentArticle.Uri.EqualsIgnoreCase ( Args.Uri.OriginalString ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				Args.Cancel = true;

				try { ( new WebBrowserTask () { Uri = Args.Uri } ).Show (); } catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit après l'échec de la navigation du contrôle WebBrowser.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationFailedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_NavigationFailed ( object Sender, NavigationFailedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.IsIndeterminate = false;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque Javascript appelle la méthode window.external.notify(<data>)
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NotifyEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void WebBrowser_ScriptNotify ( object Sender, NotifyEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			var QueryString = Args.Value.QueryString ();

			if ( QueryString.ContainsKey ( "Method" ) )
				{
				//---------------------------------------------------------------------------------------------------------------
				switch ( QueryString["Method"] )
					{
					//-----------------------------------------------------------------------------------------------------------
					#region // Zoom sur une Image
					//-----------------------------------------------------------------------------------------------------------
					case "ZoomImage" :
						{
						//-------------------------------------------------------------------------------------------------------
						if ( QueryString.ContainsKey ( "Uri" ) )
							{
							try
								{
								this.OpenImageViewerPopup ( new Uri ( QueryString["Uri"] ) );
								}
							catch {}
							}
						
						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					#endregion
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					#region // Affichage d'une Vidéo
					//-----------------------------------------------------------------------------------------------------------
					case "ShowMedia" :
						{
						//-------------------------------------------------------------------------------------------------------
						if ( QueryString.ContainsKey ( "Uri" ) )
							{
							try
								{
								this.OpenVideoViewerPopup ( new Uri ( QueryString["Uri"] ) );
								}
							catch {}
							}
						
						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					#endregion
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					#region // Chargement d'un Article
					//-----------------------------------------------------------------------------------------------------------
					case "GetArticle" :
						{
						//-------------------------------------------------------------------------------------------------------
						Article Article = Article.Parse ( QueryString );

						if ( ! Article.IsEmpty ) this.Navigate ( true, Article );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					#endregion
					//-----------------------------------------------------------------------------------------------------------
					
					//-----------------------------------------------------------------------------------------------------------
					#region // Chargement d'un Lien
					//-----------------------------------------------------------------------------------------------------------
					case "GoToUri" :
						{
						//-------------------------------------------------------------------------------------------------------
						Article Article = Article.Parse ( QueryString );

						if ( Article.IsSingleLink ) this.Navigate ( true, Article );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					#endregion
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					#region // Chargement des Articles précédents
					//-----------------------------------------------------------------------------------------------------------
					case "GetPreviousArticles" :
						{
						//-------------------------------------------------------------------------------------------------------
						this.IsIndeterminate = true;

						RestService.GetPreviousArticlesList ( this.CurrentSection, (S, A) =>
							{
							//---------------------------------------------------------------------------------------------------
							if ( A.Result == RestRequestResult.Success && ! string.IsNullOrEmpty ( A.Content ) )
								{
								try
									{
									this.WebBrowserControl.InvokeScript ( "insertArticles", new string[] { A.Content } );
									}
								catch {}
								}
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							this.IsIndeterminate = false;
							//---------------------------------------------------------------------------------------------------
							} );

						break;
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					#endregion
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion du Zoom
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre la Popup de visualisation des Images.
		/// </summary>
		/// <param name="Address">Image à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenImageViewerPopup ( Uri Address )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				this.ImageViewerPopup = new ImageViewerPopup ( Address );

				this.ImageViewerPopupContainer.Child      = this.ImageViewerPopup;
				this.ImageViewerPopupContainer.Visibility = Visibility.Visible;

				this.UpdadeApplicationBarIconButton ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ferme la Popup de visualisation des Images.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CloseImageViewerPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.ImageViewerPopupContainer.Visibility = Visibility.Collapsed;

			this.ImageViewerPopup.Close ();

			this.ImageViewerPopupContainer.Child = null;
			this.ImageViewerPopup                = null;

			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des Sections
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre la Popup de visualisation des Images.
		/// </summary>
		/// <param name="Address">Image à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenSectionsPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				this.SectionsPopupContainer.Visibility = Visibility.Visible;

				this.LeftPanelPopup.AnimateOpen ();

				this.UpdadeApplicationBarIconButton ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ferme la Popup de visualisation des Images.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CloseSectionsPopup ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.SectionsPopupContainer.Visibility = Visibility.Collapsed;

			this.LeftPanelPopup.AnimateClose ();

			this.UpdadeApplicationBarIconButton ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des Vidéos
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Ouvre la Popup de visualisation des Images.
		/// </summary>
		/// <param name="Address">Image à charger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OpenVideoViewerPopup ( Uri Address )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				(new MediaPlayerLauncher ()
					{
					//-----------------------------------------------------------------------------------------------------------
					Media       = Address                           ,
					Controls    = MediaPlaybackControls.Pause       | 
						          MediaPlaybackControls.FastForward | 
						          MediaPlaybackControls.Rewind      ,
					Orientation = MediaPlayerOrientation.Landscape  ,
					//-----------------------------------------------------------------------------------------------------------
					}).Show ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures de Gestion des ApplicationBarIconButton
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Reflète l'état de la page en cours sur les Icons en bas.
		/// </summary>
		/// <param name="ReloadApplicationButtons">Indique s'il faut tout recharger.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void UpdadeApplicationBarIconButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.BottomAppBar.Height = ( Instance.ExpandMenu ) ? 
			                                             DeviceInfos.ApplicationBarHeight : 
			                                             DeviceInfos.MinimizedApplicationBarHeight;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( this.ImageViewerPopup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				SystemTray.IsVisible = false;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot    .DisableSlide  = true;
				this.ApplicationBar.IsMenuEnabled = false;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.ApplicationBar.SetButtons ( ApplicationBarMode.Default, this.CloseImageViewerAppBarButton );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.SectionsPopupContainer.Visibility == Visibility.Visible )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( DeviceInfos.Version == WindowsPhoneVersion.WP81 )
					SystemTray.IsVisible = true;
				else
					SystemTray.IsVisible = (DeviceInfos.Orientation == PhoneOrientation.Portrait);
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot    .DisableSlide  = true;
				this.ApplicationBar.IsMenuEnabled = false;

				this.ApplicationBar.SetButtons ( ApplicationBarMode.Default, this.CloseSectionsAppBarButton );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( DeviceInfos.Version == WindowsPhoneVersion.WP81 )
					SystemTray.IsVisible = true;
				else
					SystemTray.IsVisible = (DeviceInfos.Orientation == PhoneOrientation.Portrait);
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot.DisableSlide = false;

				ApplicationBarMode Mode = ( Instance.ExpandMenu ) ? ApplicationBarMode.Default : 
				                                                    ApplicationBarMode.Minimized;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				object CurrentObject = this.PageNavigator.Last;

				if ( CurrentObject == null ) CurrentObject = SectionType.All;
				//---------------------------------------------------------------------------------------------------------------
						
				//---------------------------------------------------------------------------------------------------------------
				if ( CurrentObject is Article )
					{
					//-----------------------------------------------------------------------------------------------------------
					Article Item = (Article)CurrentObject;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ! Item.IsMarked && string.IsNullOrEmpty ( Item.Title ) )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ShareAppBarButton     .IsEnabled = false;
						this.BookmarkInAppBarButton.IsEnabled = false;
						this.ViewOnlineAppBarMenu  .IsEnabled = false;

						this.ApplicationBar.SetButtons ( Mode                       , 
														 this.ReturnAppBarButton    , 
														 this.ShareAppBarButton     , 
														 this.BookmarkInAppBarButton, 
														 this.RefreshAppBarButton   );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else if ( ! Item.IsMarked )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ShareAppBarButton     .IsEnabled = true;
						this.BookmarkInAppBarButton.IsEnabled = true;
						this.ViewOnlineAppBarMenu  .IsEnabled = ( Item.Uri != null );

						this.ApplicationBar.SetButtons ( Mode                       , 
														 this.ReturnAppBarButton    , 
														 this.ShareAppBarButton     , 
														 this.BookmarkInAppBarButton, 
														 this.RefreshAppBarButton   );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.ShareAppBarButton   .IsEnabled = true;
						this.ViewOnlineAppBarMenu.IsEnabled = false;
						this.ViewOnlineAppBarMenu.IsEnabled = ( Item.Uri != null );

						this.ApplicationBar.SetButtons ( Mode                        , 
														 this.ReturnAppBarButton     , 
														 this.ShareAppBarButton      , 
														 this.BookmarkOutAppBarButton, 
														 this.RefreshAppBarButton    );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.IsMenuEnabled = true;
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else if ( CurrentObject is SectionType )
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.IsMenuEnabled = false;
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( ((SectionType)CurrentObject) == SectionType.All )
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.SetButtons ( Mode                     , 
								                         this.PinAppBarButton     , 
								                         this.RefreshAppBarButton );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					else
						{
						//-------------------------------------------------------------------------------------------------------
						this.ApplicationBar.SetButtons ( Mode                     , 
								                         this.HomeAppBarButton    , 
								                         this.PinAppBarButton     ,
								                         this.RefreshAppBarButton );
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				else
					{
					//-----------------------------------------------------------------------------------------------------------
					this.ApplicationBar.IsMenuEnabled = false;

					this.ApplicationBar.SetButtons ( Mode, this.RefreshAppBarButton );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>Menu</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnToggleMenuButtonClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.SectionsPopupContainer.Visibility == Visibility.Visible )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.CloseSectionsPopup ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( this.LayoutRoot.SelectedPanel == SlidePanel.Left )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LayoutRoot.SelectedPanel = SlidePanel.Center;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else if ( Instance.PanelMode == PanelMode.Popup )
				{
				//---------------------------------------------------------------------------------------------------------------
				this.OpenSectionsPopup  ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			else { this.LayoutRoot.SelectedPanel = SlidePanel.Left; }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton <b>Menu</b>.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLiveButtonClick ( object Sender, RoutedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.Dispatcher.BeginInvoke ( () =>
				{
				//---------------------------------------------------------------------------------------------------------------
				Instance.RootFrame.Navigate ( new Uri ("/Frames/Frm_Player.xaml", UriKind.Relative) );
				//---------------------------------------------------------------------------------------------------------------
				} );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "accueil".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnHomeButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			object CurrentObject = this.PageNavigator.Last;

			if ( CurrentObject != null )
				{
				if ( CurrentObject is SectionType )
					{
					this.Navigate ( true, SectionType.All );
					}
				else
					{
					this.Navigate ( true, this.CurrentSection );
					}
				}
			else { this.Navigate ( true, SectionType.All ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "épingler".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnPinButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				object LastObject = this.PageNavigator.Last;

				if ( LastObject is SectionType )
					{
					//-----------------------------------------------------------------------------------------------------------
					SectionType Section = (SectionType)LastObject;

					Uri Uri = new Uri ( "/Frames/Frm_Home.xaml?Section=" + Section.ToString (), UriKind.Relative );
					
					ShellTile.Create ( Uri, ScheduledAgent.GetTileData ( Uri ), true );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnReturnButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PageNavigator.CanGoBack ) this.GoBack ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "partager".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnShareButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Article Item = this.PageNavigator.Last as Article;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Item != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				try
					{
					//-----------------------------------------------------------------------------------------------------------
					string Uri   = Item.Uri;
					string Title = Item.Title;

					if ( ! string.IsNullOrEmpty ( Uri ) && ! string.IsNullOrEmpty ( Uri ) )
						{
						var Task = new ShareLinkTask () { LinkUri = new Uri ( Uri ),
														  Title   = Title          ,
														  Message = string.Empty   };
						Task.Show ();
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnBookmarkInButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Item = this.PageNavigator.Last as Article;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Item != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					using ( var B = AppBookmarks.GetForApplication () )
						{
						B.Add<Article> ( Item.ArticleID, Item );
						}

					Item.IsMarked = true;

					this.UpdadeApplicationBarIconButton ();
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					SystemTray.ProgressIndicator = new ProgressIndicator ()
						{
						IsIndeterminate = false                  ,
						IsVisible       = true                   ,
						Text            = "article sauvegardé...",
						};

					this.Dispatcher.Async ( () =>
						{
						this.Dispatcher.BeginInvoke ( new Action ( () => { SystemTray.ProgressIndicator = null; } ) );
						}, 1500 );
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnBookmarkOutButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				Article Item = this.PageNavigator.Last as Article;
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				if ( Item != null )
					{
					//-----------------------------------------------------------------------------------------------------------
					CustomMessageBox MessageBox = new CustomMessageBox ()
						{
						Caption            = "Retirer des favoris ?",
						Message            = Item.Title             ,
						LeftButtonContent  = "oui"                  ,
						RightButtonContent = "non"                  ,
						};
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					MessageBox.Dismissed += (S, A) =>
						{
						//-------------------------------------------------------------------------------------------------------
						if ( A.Result == CustomMessageBoxResult.LeftButton )
							{
							//---------------------------------------------------------------------------------------------------
							using ( var B = AppBookmarks.GetForApplication () )
								{
								B.Remove ( Item.ArticleID );
								}

							Item.IsMarked = false;

							this.UpdadeApplicationBarIconButton ();
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						};
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					MessageBox.Show ();
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "visualiser en ligne".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnViewOnlineMenuClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			Article Item = this.PageNavigator.Last as Article;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Item != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				string Uri = Item.Uri;

				if ( string.IsNullOrEmpty ( Uri ) )
					Uri = string.Format ( "http://t.01net.com/ar{0}", Item.ArticleID );
				
				try { ( new WebBrowserTask () { Uri = new Uri ( Uri ) } ).Show (); } catch {}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCloseImageViewerButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.CloseImageViewerPopup ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "retour".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnCloseSectionsButtonClick ( object Sender, EventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.CloseSectionsPopup ();
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un click sur le bouton "recharger".
		/// </summary>
		/// <param name="Sender">Objet source de l'appel</param>
		/// <param name="Args"><b>EventArgs</b> qui contient les données d'événement.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnRefreshButtonClick ( object Sender, EventArgs Args ) { this.Refresh (); }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Propriété => IsIndeterminate
		//-----------------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Contrôle la barre de progression.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private bool IsIndeterminate
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return ( this.ProgressBar.IsIndeterminate ); }
			//-------------------------------------------------------------------------------------------------------------------
			set
				{
				//---------------------------------------------------------------------------------------------------------------
				this.LeftProgressBar .IsIndeterminate = value;
				this.ProgressBar     .IsIndeterminate = value;
				this.RightProgressBar.IsIndeterminate = value;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton précédent.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler<CancelEventArgs> BeginBackKeyPress;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "NextRadio"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
